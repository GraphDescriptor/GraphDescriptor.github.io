{"version":3,"sources":["components/Editor/Editor.js","components/Header.js","panels/CodeEditorPanel.js","panels/DataEditorPanel.js","panels/VisualizationGivenDataPanel.js","components/Loader.js","utils/color.js","components/Descriptions.js","panels/DescriptionPanel.js","descriptions/descriptions.js","demo/demo.js","linkConditions/utils.js","linkConditions/conditionOperations.js","descriptor/utils.js","descriptor/global.js","descriptor/NLDComponents.js","descriptor/compare.js","attributeRelation/attributeRelation.js","attributeRelation/graphDistance.js","descriptor/entity2element.js","components/TitleBar.js","utils/parameterStyle.js","Main.js","descriptor/index.js","linkConditions/linkCondition.js","components/GallaryItem.js","pages/HomePage.js","App.js","reportWebVitals.js","index.js"],"names":["Editor","code","setCode","language","style","fontFamily","value","onValueChange","highlight","languages","padding","className","Header","title","height","width","lineHeight","fontWeight","borderLeft","fontSize","color","textIndent","CodeEditorPanel","codeStr","setCodeStr","submit","useState","modified","setModified","minWidth","margin","display","flexDirection","marginTop","background","position","right","top","zIndex","cursor","onClick","e","DataEditorPanel","dataStr","setDataStr","VisualizationGivenDataPanel","svg","ref","useRef","useEffect","current","innerHTML","appendChild","Loader","state","colorTable","findSimiliarColor","colorRGBA","r","g","b","minDistance","Number","MAX_VALUE","res","forEach","term","vec","r_","g_","b_","d","name","DescriptionTerm","visibleElements","onMouseOver","target","backgroundColor","d3","attr","elements","onMouseLeave","dangerouslySetInnerHTML","__html","content","getTreeData","graphDescriptions","defaultExpandNodes","parentKey","i","key","switch","push","children","Array","isArray","length","Descriptions","loadingText","loading","treeData","selectable","defaultExpandedKeys","marginLeft","DescriptionPanel","linkConditions","layoutDescriptions","linkDescription","condition","slice","sort","a","coverage","relation","attribute","linkConditionDescription","paddingLeft","orientation","demos","miserables","data","nodeEncoding","preload","demo","fetch","then","text","json","console","error","extractAttributes","Object","entries","nodes","k","v","type","arr","map","n","min","max","q1","parseInt","q3","getNumericalStats","generateLinkingConditions","node1","node2","attributes","val1","val2","undefined","overlap","l2","filter","x","includes","combinations","array","results","copy","prefix","concat","powerSet","join","Math","abs","getNormalizedDifference","rawDiff","keys","unionCondition","condition1","condition2","assign","accumulateCondition","excludeCondition","NUMERICAL","CATEGORICAL","dom","element","ownAttrs","computedStyles","DEFAULT_ATTRIBUTE","BASIC_STYLES","BASIC_SVG_ELEMENTS","get","tagName","cx","baseVal","cy","x1","y1","x2","y2","y","points","from","point","channel","object","isEqual","every","_","aProps","getOwnPropertyNames","bProps","propName","this","deepcopy","obj","JSON","parse","stringify","dfs","callback","stack","index","indexNext","pop","child","NoLinDiagram","nodeAttrs","Map","linkAttrs","node","has","set","SUPPORTED_TYPES","links","link","delete","computeAttributeTypeAndRange","NUMERICAL_LENGTH_THRESHOLD","range","isAllNumerical","textualizeVaringStringArray","connector","str","item","textualizeStringArray","number2ordinal","number","special","deca","floor","Set","COMMON_STYLE_CHANNELS","fill","stroke","rx","ry","SHARED_CHANNELS","DESCRIPTION_TEMPLATE","constituent","entityType","numberOfElementsEachEntity","_entityType","_numberOfElementsEachEntity","onePrimitive","numberOfLabels","ordinal","multiPrimitive","tagNames","multiPrimitiveTagName","attrVal","_tagName","_attrName","_attrVal","channels2attribute","isfirstWordUpper","channels","samePrimitive","sameLabelIs","sameLabelIBegin","sameLabelIsStop","correlationC2C","chanName","attrName","chanVal","attrVals","correlationN2C","attrValMin","attrValMax","correlationN2N","isUp","correlationUndefined","PARAMETER_TYPE","entity","NLDCompDiff","isItemEmpty","indexes","unstableComponents","unstableArray","unstableItem","NLDComponents","osvg","basicElementArray","anotherNLDComponents","diff","ele1","ele2","eleDiff","compare","element1","element2","NLDComponents1","NLDComponents2","diffWith","computePearsonCorrelation","X","Y","Statistics","correlationCoefficient","checkDataType","isNaN","parseFloat","first","second","isInteger","size","attributeRelation","threshold","dataTypeX","dataTypeY","pearsonCorrelation","typeX","typeY","correlation","add","attributeMapping","MIN_VALUE","layoutRelation","graph","N","idToIdx","id","euclidMatrix","j","sqrt","floydMatrix","Infinity","fr","to","calcDistance","flat","combined","floyd","euclid","mapAttribute2Channel","func","entity2element","element2label","svgOrigin","nldOrigin","label2attr2diff","shuffledGraph","shuffledRange","indexOf","split","svgShuffled","nldShuffled","diffs","isEmpty","eliminate","diffItem","elementIndex","label","attr2diff","diff1","diff2","mergedDiff","mergeDiff","label2elements","element2entity","eleIndexSet","entityIndex","eleIndex","channelNames","mapEntity2Element","labelsOfElements","swapCache","log","clonedGraph","thisEntity","svgControl","entitiesWithDiffAttr_INDEX","findEntitiesWithDiffAttr_INDEX","valueStack","isAttributesAllSame","some","elementFrequency","nldControl","nldBeforeSwap","nldAfterSwap","indexofSwapDiff","svgAfterSwap","swapDiff","getIndexOfDifferences","elementJndex","TitleBar","borderBottom","processValue","replace","styleParameter","parameter","test","Main","runID","setRunID","setLoading","document","createElement","SVG","setSVG","setVisibleElements","graphDescripitons","setGraphDescriptions","setLayoutDescriptions","setLinkConditions","useParams","getPreloadData","firstChild","allElements","ele","svgToArray","descriptions","description","desc","elementsIdx","idx","oridata","beginTime","performance","now","Function","nldComponents","node2element","nodeElement2label","link2element","linkElement2label","element2link","node2element_i","linkElements","linkset","nodeset","nodeLabel2attr2diff","linkLabel2attr2diff","genDescsForAttr2Diff","attr2diffEntries","relatedElements","relatedElementsIdx","result","encodingDetailDescription","template","parameters","elementSet","descrpitionSentence","classes","label2class","l","elementDescription","tagNameChoiceDescriptions","tagName2attr2val","reduce","val","commonStyleDiff","thisTagNameRelatedElements","thisTagNameRelatedElementsIdx","valueArrayOfAttributesControlsThisTag","thisTagNameDescriptions","attr2diffEntriesWithThisTag","thisTagDiff","body","svgBBox","getBoundingClientRect","elementIndexSet","box","removeChild","endTime","allElementsIdx","xs","ys","xAttrs","yAttrs","xRelation","yRelation","axis","attrs","attrNames","descriptor","fetchEncodingDescriptions","conditions","nodeMap","linkSet","source","excludeUnionResult","linkCnt","possibleConditions","frequency","linkCondition","maxWidth","left","transform","paddingBottom","GallaryItem","image","route","history","useHistory","hoverable","borderRadius","cover","alt","src","objectFit","Meta","whiteSpace","textOverflow","overflow","HomePage","alignItems","marginBottom","flexWrap","justifyContent","class","titleMap","App","exact","path","render","match","params","reportWebVitals","onPerfEntry","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.8063788b.chunk.js","sourcesContent":["import React from \"react\";\r\nimport SimpleCodeEditor from \"react-simple-code-editor\";\r\nimport { highlight, languages } from \"prismjs/components/prism-core\";\r\nimport \"prismjs/components/prism-clike\";\r\nimport \"prismjs/components/prism-javascript\";\r\nimport \"prismjs/themes/prism.css\"; //Example style, you can use another\r\nimport \"./style.css\"\r\n\r\nfunction Editor({ code, setCode, language }) {\r\n    return (\r\n        <SimpleCodeEditor\r\n            style={{\r\n                fontFamily: 'Consolas, Menlo, monospace'\r\n            }}\r\n            value={code}\r\n            onValueChange={(code) => setCode(code)}\r\n            highlight={(code) => highlight(code, languages[language])}\r\n            padding={10}\r\n            className='simple-code-editor'\r\n        />\r\n    );\r\n}\r\n\r\nexport {\r\n    Editor\r\n}","export function Header({ title }) {\r\n    return (\r\n        <div\r\n            style={{\r\n                height: 50,\r\n                // width: 'calc(100% - 10px)',\r\n                width: \"auto\",\r\n                lineHeight: \"50px\",\r\n                fontWeight: \"bold\",\r\n                borderLeft: \"1px solid gray\",\r\n                fontSize: \"2em\",\r\n                fontFamily: \"Times\",\r\n                color: \"#333333\",\r\n                textIndent: 20,\r\n            }}\r\n        >\r\n            {title}\r\n        </div>\r\n    )\r\n}\r\n","import { Editor } from \"../components/Editor/Editor\"\r\nimport { Header } from \"../components/Header\"\r\nimport { BsPipFill, BsPlay, BsPlayFill } from \"react-icons/bs\"\r\nimport { useState } from \"react\"\r\nfunction CodeEditorPanel({ codeStr, setCodeStr, style, submit }) {\r\n    const [modified, setModified] = useState(false)\r\n\r\n    return (\r\n        <div\r\n            style={{\r\n                ...style,\r\n                minWidth: 300,\r\n                // height: 1000,\r\n                margin: 5,\r\n                display: \"flex\",\r\n                flexDirection: \"column\",\r\n            }}\r\n        >\r\n            <Header title=\"Code Editor\" />\r\n            <div\r\n                style={{\r\n                    height: \"100%\",\r\n                    marginTop: 5,\r\n                    background: \"#f6f6f6\",\r\n                    position: 'relative'\r\n                }}\r\n            >\r\n                <Editor code={codeStr} setCode={(code) => {\r\n                    setModified(true)\r\n                    setCodeStr(code)\r\n                }} language=\"js\" />\r\n                <div style={{\r\n                    position: 'absolute',\r\n                    right: 0,\r\n                    top: 0,\r\n                }}>\r\n                    {\r\n                        modified ? <BsPlayFill\r\n                            fontSize={28}\r\n                            style={{\r\n                                zIndex: 1000,\r\n                                color: '#3b5fc0',\r\n                                cursor: 'pointer',\r\n                                margin: 5,\r\n                            }}\r\n                            onClick={(e) => {\r\n                                setModified(false)\r\n                                submit()\r\n                            }} /> : <BsPlay \r\n                            style={{\r\n                                color: '#a9b0bc'\r\n                            }}\r\n                            fontSize={28} />\r\n                    }\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport { CodeEditorPanel }\r\n","import { Editor } from \"../components/Editor/Editor\"\r\nimport { Header } from \"../components/Header\"\r\n\r\nfunction DataEditorPanel({ dataStr, setDataStr, style }) {\r\n    return (\r\n        <div\r\n            style={{\r\n                ...style,\r\n                minWidth: 300,\r\n                margin: 5,\r\n                display: \"flex\",\r\n                flexDirection: \"column\",\r\n            }}\r\n        >\r\n            <Header title=\"Data Editor\" />\r\n            <div\r\n                style={{\r\n                    height: \"100%\",\r\n                    marginTop: 5,\r\n                    background: \"#f6f6f6\",\r\n                }}\r\n            >\r\n                <Editor code={dataStr} setCode={setDataStr} language=\"js\" />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport { DataEditorPanel }\r\n","import { useEffect, useRef } from \"react\"\r\nimport * as d3 from \"d3\"\r\nimport { Header } from \"../components/Header\"\r\n\r\nfunction VisualizationGivenDataPanel({ style, svg }) {\r\n    const ref = useRef()\r\n\r\n    useEffect(() => {\r\n        ref.current.innerHTML = \"\"\r\n        if (svg) {\r\n            ref.current.appendChild(svg)\r\n        }\r\n    }, [svg])\r\n\r\n    return (\r\n        <div style={style}>\r\n            <Header title=\"Node-Link Diagram\" />\r\n            <div\r\n                style={{\r\n                    marginTop: 10,\r\n                    borderLeft: \"1px solid gray\",\r\n                }}\r\n                ref={ref}\r\n            >\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport { VisualizationGivenDataPanel }\r\n","export function Loader({ style = {}, state = \"\" }) {\r\n    return (\r\n        <div\r\n            style={{\r\n                color: \"\",\r\n                fontFamily: \"Times\",\r\n                ...style,\r\n            }}\r\n        >\r\n            {state}&nbsp;&nbsp;\r\n            <div\r\n                className=\"loader-inner ball-pulse\"\r\n                style={{\r\n                    display: \"inline-block\",\r\n                }}\r\n            >\r\n                <div\r\n                    style={{\r\n                        background: \"black\",\r\n                    }}\r\n                ></div>\r\n                <div\r\n                    style={{\r\n                        background: \"black\",\r\n                    }}\r\n                ></div>\r\n                <div\r\n                    style={{\r\n                        background: \"black\",\r\n                    }}\r\n                ></div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import colorRGBA from 'color-rgba'\r\n\r\nconst colorTable = [{ \"name\": \"black\", \"vec\": [0, 0, 0] }, { \"name\": \"silver\", \"vec\": [192, 192, 192] }, { \"name\": \"grey\", \"vec\": [128, 128, 128] }, { \"name\": \"white\", \"vec\": [255, 255, 255] }, { \"name\": \"maroon\", \"vec\": [128, 0, 0] }, { \"name\": \"red\", \"vec\": [255, 0, 0] }, { \"name\": \"purple\", \"vec\": [128, 0, 128] }, { \"name\": \"fuchsia\", \"vec\": [255, 0, 255] }, { \"name\": \"green\", \"vec\": [0, 128, 0] }, { \"name\": \"lime\", \"vec\": [0, 255, 0] }, { \"name\": \"olive\", \"vec\": [128, 128, 0] }, { \"name\": \"yellow\", \"vec\": [255, 255, 0] }, { \"name\": \"navy\", \"vec\": [0, 0, 128] }, { \"name\": \"blue\", \"vec\": [0, 0, 255] }, { \"name\": \"teal\", \"vec\": [0, 128, 128] }, { \"name\": \"aqua\", \"vec\": [0, 255, 255] }, { \"name\": \"orange\", \"vec\": [255, 165, 0] }, { \"name\": \"aliceblue\", \"vec\": [240, 248, 255] }, { \"name\": \"antiquewhite\", \"vec\": [250, 235, 215] }, { \"name\": \"aquamarine\", \"vec\": [127, 255, 212] }, { \"name\": \"azure\", \"vec\": [240, 255, 255] }, { \"name\": \"beige\", \"vec\": [245, 245, 220] }, { \"name\": \"blanchedalmond\", \"vec\": [255, 228, 196] }, { \"name\": \"blueviolet\", \"vec\": [138, 43, 226] }, { \"name\": \"brown\", \"vec\": [165, 42, 42] }, { \"name\": \"burlywood\", \"vec\": [222, 184, 135] }, { \"name\": \"cadetblue\", \"vec\": [95, 158, 160] }, { \"name\": \"chartreuse\", \"vec\": [127, 255, 0] }, { \"name\": \"chocolate\", \"vec\": [210, 105, 30] }, { \"name\": \"coral\", \"vec\": [255, 127, 80] }, { \"name\": \"cornflowerblue\", \"vec\": [100, 149, 237] }, { \"name\": \"cornsilk\", \"vec\": [255, 248, 220] }, { \"name\": \"crimson\", \"vec\": [220, 20, 60] }, { \"name\": \"darkblue\", \"vec\": [0, 0, 139] }, { \"name\": \"darkcyan\", \"vec\": [0, 139, 139] }, { \"name\": \"darkgoldenrod\", \"vec\": [184, 134, 11] }, { \"name\": \"darkgrey\", \"vec\": [169, 169, 169] }, { \"name\": \"darkgreen\", \"vec\": [0, 100, 0] }, { \"name\": \"darkkhaki\", \"vec\": [189, 183, 107] }, { \"name\": \"darkmagenta\", \"vec\": [139, 0, 139] }, { \"name\": \"darkolivegreen\", \"vec\": [85, 107, 47] }, { \"name\": \"darkorange\", \"vec\": [255, 140, 0] }, { \"name\": \"darkorchid\", \"vec\": [153, 50, 204] }, { \"name\": \"darkred\", \"vec\": [139, 0, 0] }, { \"name\": \"darksalmon\", \"vec\": [233, 150, 122] }, { \"name\": \"darkseagreen\", \"vec\": [143, 188, 143] }, { \"name\": \"darkslateblue\", \"vec\": [72, 61, 139] }, { \"name\": \"darkslategrey\", \"vec\": [47, 79, 79] }, { \"name\": \"darkturquoise\", \"vec\": [0, 206, 209] }, { \"name\": \"darkviolet\", \"vec\": [148, 0, 211] }, { \"name\": \"deeppink\", \"vec\": [255, 20, 147] }, { \"name\": \"deepskyblue\", \"vec\": [0, 191, 255] }, { \"name\": \"dimgrey\", \"vec\": [105, 105, 105] }, { \"name\": \"dodgerblue\", \"vec\": [30, 144, 255] }, { \"name\": \"firebrick\", \"vec\": [178, 34, 34] }, { \"name\": \"floralwhite\", \"vec\": [255, 250, 240] }, { \"name\": \"forestgreen\", \"vec\": [34, 139, 34] }, { \"name\": \"gainsboro\", \"vec\": [220, 220, 220] }, { \"name\": \"ghostwhite\", \"vec\": [248, 248, 255] }, { \"name\": \"gold\", \"vec\": [255, 215, 0] }, { \"name\": \"goldenrod\", \"vec\": [218, 165, 32] }, { \"name\": \"greenyellow\", \"vec\": [173, 255, 47] }, { \"name\": \"honeydew\", \"vec\": [240, 255, 240] }, { \"name\": \"hotpink\", \"vec\": [255, 105, 180] }, { \"name\": \"indianred\", \"vec\": [205, 92, 92] }, { \"name\": \"indigo\", \"vec\": [75, 0, 130] }, { \"name\": \"ivory\", \"vec\": [255, 255, 240] }, { \"name\": \"khaki\", \"vec\": [240, 230, 140] }, { \"name\": \"lavender\", \"vec\": [230, 230, 250] }, { \"name\": \"lavenderblush\", \"vec\": [255, 240, 245] }, { \"name\": \"lawngreen\", \"vec\": [124, 252, 0] }, { \"name\": \"lemonchiffon\", \"vec\": [255, 250, 205] }, { \"name\": \"lightblue\", \"vec\": [173, 216, 230] }, { \"name\": \"lightcoral\", \"vec\": [240, 128, 128] }, { \"name\": \"lightcyan\", \"vec\": [224, 255, 255] }, { \"name\": \"lightgoldenrodyellow\", \"vec\": [250, 250, 210] }, { \"name\": \"lightgrey\", \"vec\": [211, 211, 211] }, { \"name\": \"lightgreen\", \"vec\": [144, 238, 144] }, { \"name\": \"lightpink\", \"vec\": [255, 182, 193] }, { \"name\": \"lightsalmon\", \"vec\": [255, 160, 122] }, { \"name\": \"lightseagreen\", \"vec\": [32, 178, 170] }, { \"name\": \"lightskyblue\", \"vec\": [135, 206, 250] }, { \"name\": \"lightslategrey\", \"vec\": [119, 136, 153] }, { \"name\": \"lightsteelblue\", \"vec\": [176, 196, 222] }, { \"name\": \"lightyellow\", \"vec\": [255, 255, 224] }, { \"name\": \"limegreen\", \"vec\": [50, 205, 50] }, { \"name\": \"linen\", \"vec\": [250, 240, 230] }, { \"name\": \"mediumaquamarine\", \"vec\": [102, 205, 170] }, { \"name\": \"mediumblue\", \"vec\": [0, 0, 205] }, { \"name\": \"mediumorchid\", \"vec\": [186, 85, 211] }, { \"name\": \"mediumpurple\", \"vec\": [147, 112, 219] }, { \"name\": \"mediumseagreen\", \"vec\": [60, 179, 113] }, { \"name\": \"mediumslateblue\", \"vec\": [123, 104, 238] }, { \"name\": \"mediumspringgreen\", \"vec\": [0, 250, 154] }, { \"name\": \"mediumturquoise\", \"vec\": [72, 209, 204] }, { \"name\": \"mediumvioletred\", \"vec\": [199, 21, 133] }, { \"name\": \"midnightblue\", \"vec\": [25, 25, 112] }, { \"name\": \"mintcream\", \"vec\": [245, 255, 250] }, { \"name\": \"mistyrose\", \"vec\": [255, 228, 225] }, { \"name\": \"moccasin\", \"vec\": [255, 228, 181] }, { \"name\": \"navajowhite\", \"vec\": [255, 222, 173] }, { \"name\": \"oldlace\", \"vec\": [253, 245, 230] }, { \"name\": \"olivedrab\", \"vec\": [107, 142, 35] }, { \"name\": \"orangered\", \"vec\": [255, 69, 0] }, { \"name\": \"orchid\", \"vec\": [218, 112, 214] }, { \"name\": \"palegoldenrod\", \"vec\": [238, 232, 170] }, { \"name\": \"palegreen\", \"vec\": [152, 251, 152] }, { \"name\": \"paleturquoise\", \"vec\": [175, 238, 238] }, { \"name\": \"palevioletred\", \"vec\": [219, 112, 147] }, { \"name\": \"papayawhip\", \"vec\": [255, 239, 213] }, { \"name\": \"peachpuff\", \"vec\": [255, 218, 185] }, { \"name\": \"peru\", \"vec\": [205, 133, 63] }, { \"name\": \"pink\", \"vec\": [255, 192, 203] }, { \"name\": \"plum\", \"vec\": [221, 160, 221] }, { \"name\": \"powderblue\", \"vec\": [176, 224, 230] }, { \"name\": \"rosybrown\", \"vec\": [188, 143, 143] }, { \"name\": \"royalblue\", \"vec\": [65, 105, 225] }, { \"name\": \"saddlebrown\", \"vec\": [139, 69, 19] }, { \"name\": \"salmon\", \"vec\": [250, 128, 114] }, { \"name\": \"sandybrown\", \"vec\": [244, 164, 96] }, { \"name\": \"seagreen\", \"vec\": [46, 139, 87] }, { \"name\": \"seashell\", \"vec\": [255, 245, 238] }, { \"name\": \"sienna\", \"vec\": [160, 82, 45] }, { \"name\": \"skyblue\", \"vec\": [135, 206, 235] }, { \"name\": \"slateblue\", \"vec\": [106, 90, 205] }, { \"name\": \"slategrey\", \"vec\": [112, 128, 144] }, { \"name\": \"snow\", \"vec\": [255, 250, 250] }, { \"name\": \"springgreen\", \"vec\": [0, 255, 127] }, { \"name\": \"steelblue\", \"vec\": [70, 130, 180] }, { \"name\": \"tan\", \"vec\": [210, 180, 140] }, { \"name\": \"thistle\", \"vec\": [216, 191, 216] }, { \"name\": \"tomato\", \"vec\": [255, 99, 71] }, { \"name\": \"turquoise\", \"vec\": [64, 224, 208] }, { \"name\": \"violet\", \"vec\": [238, 130, 238] }, { \"name\": \"wheat\", \"vec\": [245, 222, 179] }, { \"name\": \"whitesmoke\", \"vec\": [245, 245, 245] }, { \"name\": \"yellowgreen\", \"vec\": [154, 205, 50] }, { \"name\": \"rebeccapurple\", \"vec\": [102, 51, 153] }]\r\n\r\nfunction findSimiliarColor(color) {\r\n    const [r, g, b, _] = colorRGBA(color)\r\n    let minDistance = Number.MAX_VALUE\r\n    let res = 'black'\r\n    colorTable.forEach((term) => {\r\n        const [r_, g_, b_] = term.vec\r\n        const d = (r - r_) ** 2 + (g - g_) ** 2 + (b - b_) ** 2\r\n        if (d < minDistance) {\r\n            minDistance = d\r\n            res = term.name\r\n        }\r\n    })\r\n\r\n    return res\r\n}\r\n\r\nexport {\r\n    findSimiliarColor\r\n}","import { Tree } from \"antd\"\r\nimport * as d3 from \"d3\"\r\nimport { findSimiliarColor } from \"../utils/color\"\r\nimport { Loader } from \"./Loader\"\r\n\r\nfunction DescriptionTerm({ term, visibleElements }) {\r\n    const styleParameter = (word) => {\r\n        if (Array.isArray(word)) {\r\n            return word.map(\r\n                (_) => `<span class='description-parameter'>${_}</span>`\r\n            )\r\n        }\r\n\r\n        // 判断是颜色\r\n        if (/^#(?:[0-9a-fA-F]{3}){1,2}$/.test(word)) {\r\n            const name = findSimiliarColor(word)\r\n            return `<span class='description-parameter'>${name}(<span style='color: ${word};'>&#9724;</span>${word})</span>`\r\n        }\r\n\r\n        return `<span class='description-parameter'>${word}</span>`\r\n    }\r\n    return (\r\n        <p\r\n            style={{\r\n                margin: 0,\r\n                padding: 2,\r\n                fontFamily: \"Times\",\r\n            }}\r\n            onMouseOver={(e) => {\r\n                e.target.style.backgroundColor = \"#e9e9e9\"\r\n                visibleElements.forEach((e) => {\r\n                    d3.select(e).attr(\"opacity\", 0.1)\r\n                })\r\n                term.elements.forEach((e) => {\r\n                    d3.select(e).attr(\"opacity\", 1)\r\n                })\r\n            }}\r\n            onMouseLeave={(e) => {\r\n                e.target.style.backgroundColor = \"#fff\"\r\n                visibleElements.forEach((e) => {\r\n                    d3.select(e).attr(\"opacity\", 1)\r\n                })\r\n            }}\r\n            dangerouslySetInnerHTML={{\r\n                __html: term.content\r\n                // __html: term.template(\r\n                //     ...term.parameters.map(\r\n                //         styleParameter\r\n                //     )\r\n                // ),\r\n            }}\r\n        ></p>\r\n    )\r\n}\r\n\r\nfunction getTreeData(graphDescriptions, visibleElements, defaultExpandNodes, parentKey = '') {\r\n    const res = []\r\n    graphDescriptions.forEach((term, i) => {\r\n        const key = `${parentKey}-${i}`\r\n        if (term.switch) {\r\n            defaultExpandNodes.push(key)\r\n        }\r\n        res.push({\r\n            title: <DescriptionTerm visibleElements={visibleElements} term={term} />,\r\n            key: key,\r\n            children: (Array.isArray(term.children) && term.children.length > 0) ? getTreeData(term.children, visibleElements, defaultExpandNodes, key) : null\r\n        })\r\n    })\r\n    return res\r\n}\r\n\r\nfunction TreeDescription({ graphDescriptions, visibleElements }) {\r\n    let treeData = []\r\n    const defaultExpandNodes = []\r\n    if (graphDescriptions && graphDescriptions.length) {\r\n        treeData = getTreeData(graphDescriptions, visibleElements, defaultExpandNodes)\r\n    }\r\n    return <Tree\r\n        selectable={false}\r\n        treeData={treeData}\r\n        defaultExpandNodes={defaultExpandNodes}\r\n    />\r\n}\r\n\r\nexport function Descriptions({ graphDescriptions, visibleElements, loadingText, loading }) {\r\n\r\n    let treeData = []\r\n    const defaultExpandNodes = []\r\n    if (!loading && graphDescriptions && graphDescriptions.length) {\r\n        treeData = getTreeData(graphDescriptions, visibleElements, defaultExpandNodes)\r\n    }\r\n\r\n    return (\r\n        <div style={{\r\n            margin: 20\r\n        }}>\r\n            { !loading && graphDescriptions && graphDescriptions.length ? (\r\n                <Tree\r\n                    selectable={false}\r\n                    treeData={treeData}\r\n                    defaultExpandedKeys={defaultExpandNodes}\r\n                />\r\n                // graphDescriptions.map((term, i) => {\r\n                //     return <DescriptionTerm\r\n                //         visibleElements={visibleElements}\r\n                //         term={term}\r\n                //     />\r\n                // })\r\n            ) : (\r\n                <Loader\r\n                    style={{\r\n                        margin: 20,\r\n                        marginLeft: 28,\r\n                        padding: 2,\r\n                        fontFamily: \"Times\",\r\n                    }}\r\n                    state={loadingText}\r\n                ></Loader>\r\n            )}\r\n        </div>\r\n    )\r\n}","import { Header } from \"../components/Header\"\r\nimport { linkConditionDescription } from \"../descriptions/descriptions\"\r\nimport \"./descriptionPanel.css\"\r\nimport { Loader } from \"../components/Loader\"\r\nimport { Descriptions } from \"../components/Descriptions\"\r\nimport { Divider } from \"antd\"\r\n\r\nfunction DescriptionPanel({\r\n    style,\r\n    linkConditions,\r\n    graphDescriptions,\r\n    layoutDescriptions,\r\n    visibleElements,\r\n    loading,\r\n}) {\r\n    const linkDescription = linkConditionDescription(linkConditions)\r\n\r\n    return (\r\n        <div\r\n            style={{\r\n                ...style,\r\n                margin: 5,\r\n                display: \"flex\",\r\n                flexDirection: \"column\",\r\n            }}\r\n        >\r\n            <Header title=\"Descriptions\" />\r\n\r\n\r\n            <div style={{\r\n                borderLeft: \"1px solid gray\",\r\n                paddingLeft: 10,\r\n            }}>\r\n                <Divider\r\n                    orientation='left'\r\n                    style={{\r\n                        fontFamily: 'Times'\r\n                    }}\r\n                >Linking Condition</Divider>\r\n\r\n                {!loading ? (\r\n                    <div\r\n                        style={{\r\n                            margin: 20,\r\n                            marginLeft: 48,\r\n                            padding: 2,\r\n                            fontFamily: \"Times\",\r\n                        }}\r\n                        dangerouslySetInnerHTML={{\r\n                            __html: linkDescription,\r\n                        }}\r\n                    ></div>\r\n                ) : (\r\n                    <Loader\r\n                        style={{\r\n                            margin: 20,\r\n                            marginLeft: 48,\r\n                            padding: 2,\r\n                            fontFamily: \"Times\",\r\n                        }}\r\n                        state={\"Computing Linking Condition\"}\r\n                    ></Loader>\r\n                )}\r\n\r\n                <Divider\r\n                    orientation='left'\r\n                    style={{\r\n                        fontFamily: 'Times'\r\n                    }}\r\n                >Visual Encoding</Divider>\r\n\r\n                <Descriptions\r\n                    loading={loading}\r\n                    graphDescriptions={graphDescriptions}\r\n                    visibleElements={visibleElements}\r\n                    loadingText={'Computing Visual Encoding'}\r\n                />\r\n                <Divider\r\n                    orientation='left'\r\n                    style={{\r\n                        fontFamily: 'Times'\r\n                    }}\r\n                >Layout Meaning</Divider>\r\n\r\n                <Descriptions\r\n                    loading={loading}\r\n                    graphDescriptions={layoutDescriptions}\r\n                    visibleElements={visibleElements}\r\n                    loadingText={'Computing Layout Meaning'}\r\n                />\r\n            </div >\r\n        </div>\r\n    )\r\n}\r\n\r\nexport { DescriptionPanel }\r\n","function linkConditionDescription(linkConditions) {\r\n    if (!Array.isArray(linkConditions) || linkConditions.length === 0) return \"\"\r\n    // 用coverage降序排列，找出coverage最大的\r\n    const conditions = linkConditions\r\n        .slice()\r\n        .sort((a, b) => b.coverage - a.coverage)\r\n    // 暂不考虑多个condition\r\n    const condition = conditions[0]\r\n\r\n    if (condition.relation === \"common\") {\r\n        return `Two nodes are connected if their attributes <span class='description-parameter'>${\r\n            condition.attribute\r\n        }</span> are with a same value${\r\n            condition.value === \"@@any\"\r\n                ? \"\"\r\n                : `: <span class='description-parameter attribute-parameter'>${condition.value}</span>`\r\n        }.`\r\n    }\r\n    if (condition.relation === \"overlap\") {\r\n        return `Two nodes are connected if their attributes <span class='description-parameter attribute-parameter'>${\r\n            condition.attribute\r\n        }</span> have common values${\r\n            condition.value === \"@@any\"\r\n                ? \"\"\r\n                : `: <span class='description-parameter attribute-parameter'>${condition.value}</span>`\r\n        }.`\r\n    }\r\n    if (condition.relation === \"similar\") {\r\n        return `Two nodes are connected if their attributes <span class='description-parameter attribute-parameter'>${condition.attribute}</span> are close, maybe with a difference less than: <span class='description-parameter'>${condition.value}</span>.`\r\n    }\r\n    if (condition.relation === \"same-bin\") {\r\n        return `Two nodes are connected if their attributes <span class='description-parameter attribute-parameter'>${\r\n            condition.attribute\r\n        }</span> are within the same bin${\r\n            condition.value === \"@@any\"\r\n                ? \"\"\r\n                : `: <span class='description-parameter attribute-parameter'>${condition.value}</span>`\r\n        }.`\r\n    }\r\n}\r\n\r\nexport { linkConditionDescription }\r\n","const demos = {\r\n    miserables: {\r\n        data: \"miserables/miserables_5.json\",\r\n        code: \"miserables/code.js\",\r\n    },\r\n    nodeEncoding: {\r\n        data: \"nodeEncoding/data.json\",\r\n        code: \"nodeEncoding/code.js\",\r\n    },\r\n    \"imdb-movies\": {\r\n        data: \"imdb-movies-raw/data.json\",\r\n        code: \"imdb-movies-raw/code.js\",\r\n        preload: \"imdb-movies-raw/preload.json\",\r\n        // data: \"imdb-movies/data.json\",\r\n        // code: \"imdb-movies/code.js\",\r\n        // preload: \"imdb-movies/preload.json\"\r\n    },\r\n    \"imdb-actors\": {\r\n        data: \"imdb-actors-raw/data.json\",\r\n        code: \"imdb-actors-raw/code.js\",\r\n        preload: \"imdb-actors-raw/preload.json\",\r\n        // data: \"imdb-actors/data.json\",\r\n        // code: \"imdb-actors/code.js\",\r\n        // preload: \"imdb-actors/preload.json\"\r\n    },\r\n    \"imdb-movies-link\": {\r\n        data: \"imdb-movies-link/data.json\",\r\n        code: \"imdb-movies-link/code.js\",\r\n        preload: \"imdb-movies-link/preload.json\",\r\n        // data: \"imdb-movies/data.json\",\r\n        // code: \"imdb-movies/code.js\",\r\n        // preload: \"imdb-movies/preload.json\"\r\n    },\r\n    \"imdb-movies-shapes\": {\r\n        data: \"imdb-movies-shapes/data.json\",\r\n        code: \"imdb-movies-shapes/code.js\",\r\n        preload: \"imdb-movies-shapes/preload.json\",\r\n        // data: \"imdb-movies/data.json\",\r\n        // code: \"imdb-movies/code.js\",\r\n        // preload: \"imdb-movies/preload.json\"\r\n    },\r\n}\r\n\r\nasync function getPreloadData(demo) {\r\n    try {\r\n        // 需要异步优化\r\n        const dataStr = await fetch(`data/${demos[demo].data}`).then((res) =>\r\n            res.text()\r\n        )\r\n        const codeStr = await fetch(`data/${demos[demo].code}`).then((res) =>\r\n            res.text()\r\n        )\r\n        const preload = await fetch(`data/${demos[demo].preload}`).then((res) =>\r\n            res.json()\r\n        )\r\n\r\n        return {\r\n            dataStr,\r\n            codeStr,\r\n            preload,\r\n        }\r\n    } catch (e) {\r\n        console.error(e)\r\n        return {\r\n            dataStr: \"\",\r\n            codeStr: \"\",\r\n            preload: null,\r\n        }\r\n    }\r\n}\r\n\r\nexport { getPreloadData }\r\n","const getNumericalStats = (data, attr) => {\r\n    const arr = data.nodes.map(n => n[attr])\r\n    arr.sort((a, b) => a - b)\r\n    return {\r\n        min: arr[0],\r\n        max: arr[arr.length - 1],\r\n        q1: arr[parseInt(arr.length * 0.25)],\r\n        q3: arr[parseInt(arr.length * 0.75)],\r\n    }\r\n}\r\n\r\nfunction extractAttributes(data) {\r\n    const res = []\r\n    for (const [k, v] of Object.entries(data.nodes[0])) {\r\n        if (typeof v === 'number') {\r\n            res.push({\r\n                name: k,\r\n                type: 'numerical'\r\n            })\r\n        } else if (typeof v === 'string') {\r\n            res.push({\r\n                name: k,\r\n                type: 'categorical'\r\n            })\r\n        } else if (Array.isArray(v)) {\r\n            res.push({\r\n                name: k,\r\n                type: 'list'\r\n            })\r\n        }\r\n    }\r\n\r\n    res.forEach(attr => {\r\n        if (attr.type === 'numerical') {\r\n            const { min, max, q1, q3 } = getNumericalStats(data, attr.name)\r\n            attr.min = min\r\n            attr.max = max\r\n            attr.q1 = q1\r\n            attr.q3 = q3\r\n        }\r\n    })\r\n\r\n    return res\r\n}\r\n\r\nexport {\r\n    extractAttributes\r\n}","const THRESHOLD = 0.3 // TODO: threshold value\r\n\r\nconst getNormalizedDifference = (val1, val2, attribute) => {\r\n    return val1 === val2\r\n        ? 0\r\n        : Math.abs(val1 - val2) / (attribute.max - attribute.min)\r\n}\r\n\r\nconst intersectList = (l1, l2) => {\r\n    return l1.filter((x) => l2.includes(x)).sort()\r\n}\r\n\r\nconst powerSet = (array) => {\r\n    // O(2^n)\r\n    const results = [[]]\r\n    for (const value of array) {\r\n        const copy = [...results] // See note below.\r\n        for (const prefix of copy) {\r\n            results.push(prefix.concat(value))\r\n        }\r\n    }\r\n    return results\r\n}\r\n\r\nfunction generateLinkingConditions(node1, node2, attributes) {\r\n    const res = {}\r\n    attributes.forEach((attr) => {\r\n        res[attr.name] = {}\r\n        const val1 = node1[attr.name]\r\n        const val2 = node2[attr.name]\r\n        if (val1 === undefined || val2 === undefined) {\r\n            delete res[attr.name]\r\n            return\r\n        }\r\n        if (attr.type === \"categorical\") {\r\n            if (val1 === val2) {\r\n                res[attr.name][\"common\"] = res[attr.name][\"common\"] || {}\r\n                res[attr.name][\"common\"][val1] = 1\r\n                res[attr.name][\"common\"][\"@@any\"] = 1\r\n            }\r\n        } else if (attr.type === \"list\") {\r\n            // list, 遍历所有组合\r\n            const overlap = intersectList(val1, val2)\r\n            if (overlap.length === 0) {\r\n                delete res[attr.name]\r\n                return\r\n            }\r\n            res[attr.name][\"overlap\"] = res[attr.name][\"common\"] || {}\r\n            res[attr.name][\"overlap\"][\"@@any\"] = 1\r\n            const combinations = powerSet(overlap)\r\n            for (const arr of combinations) {\r\n                const key = arr.join(\"-\")\r\n                if (key) {\r\n                    res[attr.name][\"overlap\"][key] = 1\r\n                }\r\n            }\r\n        } else if (attr.type === \"numerical\") {\r\n            const diff = getNormalizedDifference(val1, val2, attr)\r\n            if (diff < THRESHOLD) {\r\n                const rawDiff = Math.abs(val1 - val2)\r\n                // res[attr.name]['similar'] = res[attr.name]['similar'] || {}\r\n                // res[attr.name]['similar'][rawDiff] = 1\r\n                res[attr.name][\"similar\"] = rawDiff\r\n                if (val1 === val2) {\r\n                    res[attr.name][\"common\"] = res[attr.name][\"common\"] || {}\r\n                    res[attr.name][\"common\"][val1] = 1\r\n                    res[attr.name][\"common\"][\"@@any\"] = 1\r\n                }\r\n            }\r\n\r\n            // 四位数\r\n            if (val1 < attr.q1 && val2 < attr.q1) {\r\n                res[attr.name][\"same-bin\"] = res[attr.name][\"same-bin\"] || {}\r\n                res[attr.name][\"same-bin\"][\"low\"] = 1\r\n                res[attr.name][\"same-bin\"][\"@@any\"] = 1\r\n            } else if (\r\n                val1 >= attr.q1 &&\r\n                val1 <= attr.q3 &&\r\n                val2 >= attr.q1 &&\r\n                val2 <= attr.q3\r\n            ) {\r\n                res[attr.name][\"same-bin\"] = res[attr.name][\"same-bin\"] || {}\r\n                res[attr.name][\"same-bin\"][\"middle\"] = 1\r\n                res[attr.name][\"same-bin\"][\"@@any\"] = 1\r\n            } else if (val1 > attr.q3 && val2 > attr.q3) {\r\n                res[attr.name][\"same-bin\"] = res[attr.name][\"same-bin\"] || {}\r\n                res[attr.name][\"same-bin\"][\"high\"] = 1\r\n                res[attr.name][\"same-bin\"][\"@@any\"] = 1\r\n            }\r\n        }\r\n        if (Object.keys(res[attr.name]).length === 0) {\r\n            delete res[attr.name]\r\n        }\r\n    })\r\n\r\n    return res\r\n}\r\n\r\n/**\r\n * condition: attr-relation-value-cnt\r\n * @param {*} condition1\r\n * @param {*} condition2\r\n */\r\nfunction unionCondition(condition1, condition2) {\r\n    const res = Object.assign({}, condition1)\r\n    for (const attr in condition2) {\r\n        if (!(attr in res)) {\r\n            res[attr] = condition2[attr]\r\n            continue\r\n        }\r\n        for (const relation in condition2[attr]) {\r\n            if (!(relation in res[attr])) {\r\n                res[attr][relation] = condition2[attr][relation]\r\n                continue\r\n            }\r\n            if (relation === \"similar\") {\r\n                res[attr][relation] = Math.min(\r\n                    res[attr][relation],\r\n                    condition2[attr][relation]\r\n                )\r\n            } else {\r\n                for (const value in condition2[attr][relation]) {\r\n                    if (!(value in res[attr][relation])) {\r\n                        res[attr][relation][value] =\r\n                            condition2[attr][relation][value]\r\n                    } else {\r\n                        res[attr][relation][value] +=\r\n                            condition2[attr][relation][value]\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return res\r\n}\r\n\r\nfunction accumulateCondition(condition1, condition2) {\r\n    const res = Object.assign({}, condition1)\r\n    for (const attr in condition2) {\r\n        if (!(attr in res)) {\r\n            res[attr] = condition2[attr]\r\n            continue\r\n        }\r\n        for (const relation in condition2[attr]) {\r\n            if (!(relation in res[attr])) {\r\n                res[attr][relation] = condition2[attr][relation]\r\n                continue\r\n            }\r\n            // NOTE: 跟union不一样，会统计频率\r\n            // if (relation === 'similar') {\r\n            // res[attr][relation] = Math.min(res[attr][relation], condition2[attr][relation])\r\n            // } else {\r\n            for (const value in condition2[attr][relation]) {\r\n                if (!(value in res[attr][relation])) {\r\n                    res[attr][relation][value] =\r\n                        condition2[attr][relation][value]\r\n                } else {\r\n                    res[attr][relation][value] +=\r\n                        condition2[attr][relation][value]\r\n                }\r\n            }\r\n            // }\r\n        }\r\n    }\r\n    return res\r\n}\r\n\r\nfunction excludeCondition(condition1, condition2) {\r\n    // NOTE: may change condition1, but not condition2\r\n    const res = Object.assign({}, condition1)\r\n    for (const attr in condition2) {\r\n        if (!(attr in res)) {\r\n            continue\r\n        }\r\n        for (const relation in condition2[attr]) {\r\n            if (!(relation in res[attr])) {\r\n                continue\r\n            }\r\n            if (typeof res[attr][relation] === \"number\") {\r\n                // NOTE: exclude的时候，不同的处理方式不同\r\n                if (res[attr][relation] >= condition2[attr][relation]) {\r\n                    delete res[attr][relation]\r\n                } else {\r\n                    res[attr][relation] = { [condition2[attr][relation]]: 1 }\r\n                }\r\n            } else {\r\n                for (const value in condition2[attr][relation]) {\r\n                    if (value in res[attr][relation]) {\r\n                        delete res[attr][relation][value]\r\n                    }\r\n                }\r\n                if (Object.keys(res[attr][relation]).length === 0) {\r\n                    delete res[attr][relation]\r\n                }\r\n            }\r\n        }\r\n        if (Object.keys(res[attr]).length === 0) {\r\n            delete res[attr]\r\n        }\r\n    }\r\n    return res\r\n}\r\n\r\nexport {\r\n    generateLinkingConditions,\r\n    unionCondition,\r\n    excludeCondition,\r\n    accumulateCondition,\r\n}\r\n","/**\r\n * @create date 2021-03-07 20:19:00\r\n * @modify date 2021-03-07 20:19:00\r\n * @desc [description]\r\n */\r\nimport {\r\n    BASIC_SVG_ELEMENTS,\r\n    DEFAULT_ATTRIBUTE,\r\n    SUPPORTED_TYPES,\r\n} from \"./global\"\r\nimport * as d3 from \"d3\"\r\n\r\nexport const NUMERICAL = \"NUMERICAL\"\r\nexport const CATEGORICAL = \"CATEGORICAL\"\r\n\r\n// parse attributes\r\nconst attrValueParser = (value) => {\r\n    // if (rgba(value).length == 4) {\r\n    //     // color\r\n    //     return rgba(value)\r\n    // } else\r\n    if (!isNaN(parseFloat(value))) {\r\n        return parseFloat(value)\r\n    } else {\r\n        return value\r\n    }\r\n}\r\n\r\nexport const dom = {\r\n    /**\r\n     * count the number of basic elements contained in the input svg\r\n     * @param {html svg element} svg\r\n     */\r\n    countBasicElementsOf: function (svg) {\r\n        const count = {}\r\n        BASIC_SVG_ELEMENTS.forEach((_, name) => {\r\n            const size = d3.select(svg).selectAll(name).size()\r\n            count[name] = size\r\n        })\r\n\r\n        /**\r\n         * get difference between two count result\r\n         * if count2 > count1, it returns positive number\r\n         * @param {Object} count1: {name: String (element name), count: Number}\r\n         * @param {Object} count2: {name: String (element name), count: Number}\r\n         */\r\n        count.prototype.minus = function (subcount) {\r\n            const diff = {}\r\n            const names = new Set([\r\n                ...Object.keys(this),\r\n                ...Object.keys(subcount),\r\n            ])\r\n            names.forEach((name) => {\r\n                diff[name] =\r\n                    (subcount[name] ? subcount[name] : 0) -\r\n                    (this[name] ? this[name] : 0)\r\n            })\r\n            return diff\r\n        }\r\n        return count\r\n    },\r\n    getComputedStyle: function (element) {\r\n        // too expensive\r\n        // const computedStyles = window.getComputedStyle(element)\r\n        const ownAttrs = element.attributes // element.getAttributeNames()\r\n        const computedStyles = Object.assign({}, DEFAULT_ATTRIBUTE)\r\n        for (let i = 0; i < ownAttrs.length; i++) {\r\n            const name = ownAttrs[i].name\r\n            const value = ownAttrs[i].value\r\n            computedStyles[name] = value // attrValueParser(value)\r\n        }\r\n\r\n        let style = {}\r\n        let BASIC_STYLES = BASIC_SVG_ELEMENTS.get(element.tagName)\r\n        if (BASIC_STYLES) {\r\n            // step1: for positions\r\n            if (element.tagName == \"circle\" || element.tagName == \"ellipse\") {\r\n                // const [cx, cy] = getComputedPosition(element, [\r\n                //     element.cx.baseVal.value,\r\n                //     element.cy.baseVal.value,\r\n                // ])\r\n                const [cx, cy] = [\r\n                    element.cx.baseVal.value,\r\n                    element.cy.baseVal.value,\r\n                ]\r\n                style = { ...style, cx, cy }\r\n            } else if (element.tagName == \"line\") {\r\n                // const [x1, y1] = getComputedPosition(element, [\r\n                //     element.x1.baseVal.value,\r\n                //     element.y1.baseVal.value,\r\n                // ])\r\n                const [x1, y1] = [\r\n                    element.x1.baseVal.value,\r\n                    element.y1.baseVal.value,\r\n                ]\r\n                const [x2, y2] = [\r\n                    element.x2.baseVal.value,\r\n                    element.y2.baseVal.value,\r\n                ]\r\n                style = { ...style, x1, y1, x2, y2 }\r\n            } else if (element.tagName == \"rect\") {\r\n                const [x, y] = [\r\n                    element.x.baseVal.value,\r\n                    element.y.baseVal.value,\r\n                ]\r\n                style = { ...style, x, y }\r\n            } else if (\r\n                element.tagName === \"polygon\" ||\r\n                element.tagName === \"polyline\"\r\n            ) {\r\n                const points = Array.from(element.points).map(({ x, y }) =>\r\n                    // getComputedPosition(element, [x, y])\r\n                    [x, y]\r\n                )\r\n                points.forEach((point, i) => {\r\n                    style[`points[${i}]['x']`] = points[0]\r\n                    style[`points[${i}]['y']`] = points[1]\r\n                })\r\n            } else if (element.tagName === \"path\") {\r\n                // TODO\r\n            }\r\n\r\n            // step2: for else (e.g. r, width, fill...)\r\n            BASIC_STYLES.forEach((channel) => {\r\n                style[channel] = computedStyles[channel]\r\n            })\r\n\r\n            return style\r\n\r\n            /**\r\n             * transform a position with transform matrix (transformation)\r\n             * @param {Object} style: {tagName: 'xxx', style1: 'xx', style2: 'xx', ...}\r\n             * @param {String} transformation:  e.g. \"matrix(1, 0, 0, 1, 10, 10)\"\r\n             */\r\n            function getComputedPosition(element, position) {\r\n                //! compute position, assume only translate, no rotate, no scale\r\n                let thisNode = element\r\n                let [x, y] = position\r\n                // do {\r\n                //     if (thisNode.transform.baseVal.length) {\r\n                //         const matrix = thisNode.transform.baseVal[0].matrix\r\n                //         x += matrix.e\r\n                //         y += matrix.f\r\n                //     }\r\n                //     thisNode = thisNode.parentNode\r\n                // } while (thisNode.tagName !== \"svg\")\r\n                return [x, y]\r\n            }\r\n        }\r\n    },\r\n}\r\n\r\nexport const object = {\r\n    isEqual: function (a, b) {\r\n        //! only object, number, array, string are supported\r\n        if (typeof a !== typeof b) {\r\n            return false\r\n        }\r\n\r\n        if (\r\n            typeof a == \"string\" ||\r\n            typeof a == \"number\" ||\r\n            typeof a == \"undefined\" ||\r\n            typeof a == \"boolean\"\r\n        ) {\r\n            return a == b\r\n        } else if (typeof a == \"object\") {\r\n            if (Array.isArray(a) && Array.isArray(b)) {\r\n                return (\r\n                    a.length == b.length &&\r\n                    a.every((_, i) => this.isEqual(a[i], b[i]))\r\n                )\r\n            } else if (!Array.isArray(a) && !Array.isArray(b)) {\r\n                // Create arrays of property names\r\n                const aProps = Object.getOwnPropertyNames(a)\r\n                const bProps = Object.getOwnPropertyNames(b)\r\n\r\n                // If number of properties is different,\r\n                // objects are not equivalent\r\n                if (aProps.length != bProps.length) {\r\n                    return false\r\n                }\r\n\r\n                for (var i = 0; i < aProps.length; i++) {\r\n                    var propName = aProps[i]\r\n\r\n                    // If values of same property are not equal,\r\n                    // objects are not equivalent\r\n                    if (!this.isEqual(a[propName], b[propName])) {\r\n                        return false\r\n                    }\r\n                }\r\n\r\n                // If we made it this far, objects\r\n                // are considered equivalent\r\n                return true\r\n            } else {\r\n                return false\r\n            }\r\n        } else {\r\n            console.error(`Not supported type: ${typeof a}`)\r\n        }\r\n    },\r\n    /**\r\n     * Deep Copy an object\r\n     * @param {JSON format data} obj\r\n     */\r\n    deepcopy: function (obj) {\r\n        return JSON.parse(JSON.stringify(obj))\r\n    },\r\n    dfs: function (obj, callback) {\r\n        const stack = []\r\n        let index = obj\r\n        while (true) {\r\n            if (index) {\r\n                callback(index)\r\n                if (index.children && index.children.length) {\r\n                    let children = Array.from(index.children)\r\n                    const indexNext = children.pop()\r\n                    children.forEach((child) => stack.push(child))\r\n                    index = indexNext\r\n                } else {\r\n                    index = stack.pop()\r\n                }\r\n            } else {\r\n                break\r\n            }\r\n        }\r\n    },\r\n}\r\n\r\nexport const NoLinDiagram = {\r\n    /**\r\n     * get attributes of nodes and links\r\n     * @param {standard node-link data format} data\r\n     * @returns {nodes: node attributes array, links: link attributes array}\r\n     */\r\n    getAttributesOf: function (data) {\r\n        const nodeAttrs = new Map()\r\n        const linkAttrs = new Map()\r\n        const CONNECTOR = \"@\"\r\n        data.nodes.forEach((node) => {\r\n            for (let attr in node) {\r\n                if (typeof node[attr] == \"object\") {\r\n                    // array or obj\r\n                    Object.entries(node[attr]).forEach(([i, d]) => {\r\n                        const key = `${attr}${CONNECTOR}${i}`\r\n                        if (nodeAttrs.has(key)) {\r\n                            nodeAttrs.get(key).push(node[attr][i])\r\n                        } else {\r\n                            nodeAttrs.set(key, [node[attr][i]])\r\n                        }\r\n                    })\r\n                } else if (SUPPORTED_TYPES.has(typeof node[attr]) >= 0) {\r\n                    if (nodeAttrs.has(attr)) {\r\n                        nodeAttrs.get(attr).push(node[attr])\r\n                    } else {\r\n                        nodeAttrs.set(attr, [node[attr]])\r\n                    }\r\n                }\r\n            }\r\n        })\r\n\r\n        data.links.forEach((link) => {\r\n            for (let attr in link) {\r\n                if (linkAttrs.has(attr)) {\r\n                    linkAttrs.get(attr).push(link[attr])\r\n                } else {\r\n                    linkAttrs.set(attr, [link[attr]])\r\n                }\r\n            }\r\n        })\r\n\r\n        // delete unique identities\r\n        nodeAttrs.delete(\"id\")\r\n        linkAttrs.delete(\"source\")\r\n        linkAttrs.delete(\"target\")\r\n\r\n        nodeAttrs.forEach((value, name) => {\r\n            nodeAttrs.set(name, computeAttributeTypeAndRange(value))\r\n        })\r\n        linkAttrs.forEach((value, name) => {\r\n            linkAttrs.set(name, computeAttributeTypeAndRange(value))\r\n        })\r\n\r\n        return {\r\n            nodes: nodeAttrs,\r\n            links: linkAttrs,\r\n        }\r\n\r\n        /**\r\n         *\r\n         * @param {*} data\r\n         * @param {*} NUMERICAL_LENGTH_THRESHOLD\r\n         */\r\n        function computeAttributeTypeAndRange(\r\n            data,\r\n            NUMERICAL_LENGTH_THRESHOLD = 10\r\n        ) {\r\n            let range = []\r\n            let isAllNumerical = true\r\n            let type = NUMERICAL\r\n            data.forEach((value) => {\r\n                range.push(value)\r\n                if (typeof value !== \"number\") {\r\n                    isAllNumerical = false\r\n                }\r\n            })\r\n            if (!isAllNumerical || range.length <= NUMERICAL_LENGTH_THRESHOLD) {\r\n                type = CATEGORICAL\r\n            }\r\n            return {\r\n                type,\r\n                range,\r\n            }\r\n        }\r\n    },\r\n}\r\n\r\n/**\r\n * returns a NLized string, e.g., ['a', 'b'] => 'a and b', ['a', 'b', 'c'] => 'a, b, and c'\r\n * @param {String[]} array\r\n * @param {String} connector\r\n */\r\nexport function textualizeVaringStringArray(array, connector = \"and\") {\r\n    let str = \"\"\r\n    if (array.length == 1) {\r\n        return array[0]\r\n    }\r\n    if (array.length == 2) {\r\n        // return array.join(` ${connector} `)\r\n        return `from ${array[0]} to ${array[1]}`\r\n    }\r\n    array.forEach((item, i) => {\r\n        str += item\r\n        if (i < array.length - 1) {\r\n            if (i == array.length - 2) {\r\n                str += `, ${connector} `\r\n            } else {\r\n                str += \", \"\r\n            }\r\n        }\r\n    })\r\n    return str\r\n}\r\n\r\n/**\r\n * returns a NLized string, e.g., ['a', 'b'] => 'a and b', ['a', 'b', 'c'] => 'a, b, and c'\r\n * @param {String[]} array\r\n * @param {String} connector\r\n */\r\nexport function textualizeStringArray(array, connector = \"and\") {\r\n    let str = \"\"\r\n    if (array.length == 1) {\r\n        return array[0]\r\n    }\r\n    if (array.length == 2) {\r\n        return array.join(` ${connector} `)\r\n    }\r\n    array.forEach((item, i) => {\r\n        str += item\r\n        if (i < array.length - 1) {\r\n            if (i == array.length - 2) {\r\n                str += `, ${connector} `\r\n            } else {\r\n                str += \", \"\r\n            }\r\n        }\r\n    })\r\n    return str\r\n}\r\n\r\nexport function number2ordinal(number) {\r\n    var special = [\r\n        \"zeroth\",\r\n        \"first\",\r\n        \"second\",\r\n        \"third\",\r\n        \"fourth\",\r\n        \"fifth\",\r\n        \"sixth\",\r\n        \"seventh\",\r\n        \"eighth\",\r\n        \"ninth\",\r\n        \"tenth\",\r\n        \"eleventh\",\r\n        \"twelfth\",\r\n        \"thirteenth\",\r\n        \"fourteenth\",\r\n        \"fifteenth\",\r\n        \"sixteenth\",\r\n        \"seventeenth\",\r\n        \"eighteenth\",\r\n        \"nineteenth\",\r\n    ]\r\n    var deca = [\r\n        \"twent\",\r\n        \"thirt\",\r\n        \"fort\",\r\n        \"fift\",\r\n        \"sixt\",\r\n        \"sevent\",\r\n        \"eight\",\r\n        \"ninet\",\r\n    ]\r\n\r\n    function stringifyNumber(n) {\r\n        if (n < 20) return special[n]\r\n        if (n % 10 === 0) return deca[Math.floor(n / 10) - 2] + \"ieth\"\r\n        return deca[Math.floor(n / 10) - 2] + \"y-\" + special[n % 10]\r\n    }\r\n\r\n    // TEST LOOP SHOWING RESULTS\r\n    return stringifyNumber(number)\r\n}\r\n\r\nexport function swtichFirstWord(str) {\r\n    if (str[0].toUpperCase() == str[0]) {\r\n        return str[0].toLowerCase() + str.substring(1)\r\n    } else {\r\n        return str[0].toUpperCase() + str.substring(1)\r\n    }\r\n}\r\n\r\nexport function svgToArray(svg) {\r\n    const arr = []\r\n    object.dfs(svg, (ele) => {\r\n        if (BASIC_SVG_ELEMENTS.has(ele.tagName)) {\r\n            arr.push(ele)\r\n        }\r\n    })\r\n    return arr\r\n}","// great: it is a good channel to encode info\r\n// maybe: it is not really good enough\r\n\r\nimport { number2ordinal, textualizeStringArray, textualizeVaringStringArray } from \"./utils\"\r\n\r\nconst SUPPORTED_TYPES = new Set([\"string\", \"number\", \"undefined\", \"boolean\"])\r\n\r\n// rare: it is bad to encode info\r\nconst COMMON_STYLE_CHANNELS = new Set([\r\n    \"fill\", // great, color\r\n    \"fill-opacity\", // maybe, numerical\r\n    \"stroke\", // great, color\r\n    \"stroke-dasharray\", // rare\r\n    \"stroke-opacity\", // maybe, numerical\r\n    \"stroke-width\", // great, numerical\r\n])\r\n\r\nconst COMMON_POSITION_CHANNELS = new Map([\r\n    [\"circle\", new Set([\"cx\", \"cy\"])], // great, numerical\r\n    [\"ellipse\", new Set([\"cx\", \"cy\"])], // great, numerical\r\n    [\"line\", new Set([\"x1\", \"x2\", \"y1\", \"y2\"])], // great, numerical\r\n    [\"polygon\", new Set([\"points\"])], // great, numerical array\r\n    [\"polyline\", new Set([\"points\"])], // great, numerical array\r\n    [\"rect\", new Set([\"x\", \"y\"])], // great, rx/ry: mayby, all numerical\r\n    [\"path\", new Set([])], // great, categorical + numerical\r\n])\r\n\r\nconst DEFAULT_ATTRIBUTE = {\r\n    fill: \"#000000\",\r\n    \"fill-opacity\": 1,\r\n    stroke: \"#000000\",\r\n    \"stroke-dasharray\": \"none\",\r\n    \"stroke-opacity\": 1,\r\n    rx: \"auto\",\r\n    ry: \"auto\",\r\n}\r\n\r\nconst BASIC_SVG_ELEMENTS = new Map([\r\n    [\"circle\", [\"r\"]], // great, numerical\r\n    [\"ellipse\", [\"rx\", \"ry\"]], // great, numerical\r\n    [\"line\", []], // great, numerical\r\n    [\"polygon\", []], // great, numerical array\r\n    [\"polyline\", []], // great, numerical array\r\n    [\"rect\", [\"width\", \"height\", \"rx\", \"ry\"]], // great, rx/ry: mayby, all numerical\r\n    [\"path\", []], // great, categorical + numerical\r\n])\r\nBASIC_SVG_ELEMENTS.forEach((attributes, name) => {\r\n    attributes = attributes.concat([...COMMON_STYLE_CHANNELS])\r\n    BASIC_SVG_ELEMENTS.set(name, new Set(attributes))\r\n})\r\n\r\nconst CONNECTOR_CHAR = \"→\"\r\n\r\nconst SHARED_CHANNELS = new Set([\"rx\", \"ry\", \"cx\", \"cy\", \"points\"])\r\n\r\nconst DESCRIPTION_TEMPLATE = {\r\n    constituent: (entityType, numberOfElementsEachEntity) => {\r\n        return (_entityType, _numberOfElementsEachEntity) => {\r\n            return `Each ${_entityType} consists of ${\r\n                numberOfElementsEachEntity > 1 ? \"\" : \"only\"\r\n            } ${_numberOfElementsEachEntity} ${\r\n                numberOfElementsEachEntity > 1 ? \"different\" : \"\"\r\n            } element${numberOfElementsEachEntity > 1 ? \"s\" : \"\"}.`\r\n        }\r\n    },\r\n    onePrimitive: (numberOfLabels) => {\r\n        return (ordinal, tagName) => {\r\n            if (numberOfLabels > 1) {\r\n                return `The ${ordinal} element is a ${tagName}.`\r\n            } else {\r\n                return `It is a ${tagName}.`\r\n            }\r\n        }\r\n    },\r\n    multiPrimitive: (numberOfLabels) => {\r\n        return (ordinal, tagNames) => {\r\n            if (numberOfLabels > 1) {\r\n                return `For the ${ordinal} element, its <span class='description-parameter channel-parameter'>tagName</span> varies among multiple shapes: ${textualizeVaringStringArray(\r\n                    tagNames\r\n                )}.`\r\n            } else {\r\n                return `Its <span class='description-parameter channel-parameter'>tagName</span> varies among multiple shapes: ${textualizeVaringStringArray(\r\n                    tagNames\r\n                )}.`\r\n            }\r\n        }\r\n    },\r\n    multiPrimitiveTagName: (attrVal) => {\r\n        return (_tagName, _attrName, ..._attrVal) => {\r\n            // when the value of attrName is from attrVal.min to attrVal.max,\r\n            // or the value of attrName is attrVal[0], ..., or attrVal[-1],\r\n            _attrVal.sort()\r\n            if (\"max\" in attrVal && \"min\" in attrVal) {\r\n                return `When the value of ${_attrName} is from ${_attrVal[0]} to ${_attrVal[1]}, its <span class='description-parameter channel-parameter'>tagName</span> is changed into ${_tagName}.`\r\n            } else {\r\n                return `When the value of ${_attrName} is ${textualizeStringArray(\r\n                    _attrVal,\r\n                    \"or\"\r\n                )}, its <span class='description-parameter channel-parameter'>tagName</span> is changed into ${_tagName}.`\r\n            }\r\n        }\r\n    },\r\n    channels2attribute: (isfirstWordUpper = true) => {\r\n        return (channels, attribute) => {\r\n            return `${isfirstWordUpper ? \"I\" : \"i\"}ts ${textualizeStringArray(\r\n                channels\r\n            )} encode${\r\n                channels.length > 1 ? \"\" : \"s\"\r\n            } the attribute ${attribute}.`\r\n        }\r\n    },\r\n    samePrimitive: (sameLabelIs) => {\r\n        return (sameLabelIBegin, sameLabelIsStop, ordinal) => {\r\n            if (sameLabelIs.length > 1) {\r\n                return `For the ${sameLabelIBegin} to ${sameLabelIsStop} elements, its encoding scheme is same to the ${ordinal} element.`\r\n            } else {\r\n                return `For the ${sameLabelIBegin} element, its encoding scheme is same to the ${ordinal} element.`\r\n            }\r\n        }\r\n    },\r\n    correlationC2C: (chanName, attrName, chanVal, attrVals) => {\r\n        return `When the value of ${attrName} is ${textualizeStringArray(\r\n            attrVals.sort(),\r\n            \"or\"\r\n        )}, its ${chanName} is changed into ${chanVal}.`\r\n    },\r\n\r\n    correlationN2C: (chanName, attrName, chanVal, attrValMin, attrValMax) => {\r\n        return `When the value of ${attrName} is from ${attrValMin} to ${attrValMax}, its ${chanName} is changed into ${chanVal}.`\r\n    },\r\n    correlationN2N: (isUp) => {\r\n        return (chanName, attrName) => {\r\n            return `The greater ${attrName}, the ${\r\n                isUp ? \"greater📈\" : \"smaller📉\"\r\n            } its ${chanName}.`\r\n        }\r\n    },\r\n    correlationUndefined: (chanName, attrName) => {\r\n        return `The correlation between ${chanName} and ${attrName} can not be determined yet.`\r\n    },\r\n}\r\n\r\nconst PARAMETER_TYPE = {\r\n    entity: \"entity-parameter\",\r\n    element: \"element-parameter\",\r\n    channel: \"channel-parameter\",\r\n    attribute: \"attribute-parameter\",\r\n    value: \"value-parameter\",\r\n}\r\n\r\nexport {\r\n    PARAMETER_TYPE,\r\n    BASIC_SVG_ELEMENTS,\r\n    COMMON_STYLE_CHANNELS,\r\n    DEFAULT_ATTRIBUTE,\r\n    CONNECTOR_CHAR,\r\n    COMMON_POSITION_CHANNELS,\r\n    SHARED_CHANNELS,\r\n    DESCRIPTION_TEMPLATE,\r\n    SUPPORTED_TYPES,\r\n}\r\n","import { BASIC_SVG_ELEMENTS, COMMON_STYLE_CHANNELS } from \"./global\"\r\nimport { dom, object } from \"./utils\"\r\n\r\nexport class NLDCompDiff {\r\n    constructor() {\r\n        this.array = []\r\n    }\r\n    isItemEmpty(item) {\r\n        if (item?.tagName) {\r\n            // tagName different\r\n            return false\r\n        } else {\r\n            if (item?.style) {\r\n                if (Object.keys(item.style).length > 0) {\r\n                    // and something is in item.style\r\n                    return false\r\n                }\r\n            }\r\n        }\r\n        return true\r\n    }\r\n    isEmpty() {\r\n        return this.array.every(this.isItemEmpty)\r\n    }\r\n    getIndexOfDifferences() {\r\n        const indexes = []\r\n        this.array.forEach((item, i) => {\r\n            if (!this.isItemEmpty(item)) {\r\n                indexes.push(i)\r\n            }\r\n        })\r\n        return indexes\r\n    }\r\n    /**\r\n     * eliminate unstable channels from difference\r\n     * only remain stable channels\r\n     * @param {NLDCompDiff} unstableComponents\r\n     */\r\n    eliminate(unstableComponents) {\r\n        const unstableArray = unstableComponents.array\r\n        this.array.forEach((item, i) => {\r\n            const unstableItem = unstableArray[i]\r\n            if (item.tagName && unstableItem.tagName) {\r\n                delete item.tagName\r\n            }\r\n            if (item.style) {\r\n                for (let channel in item.style) {\r\n                    if (unstableItem.style && unstableItem.style[channel]) {\r\n                        delete item.style[channel]\r\n                    }\r\n                }\r\n            }\r\n        })\r\n    }\r\n}\r\n\r\nexport class NLDComponents {\r\n    // node link diagram components\r\n    constructor(svg) {\r\n        if (svg) {\r\n            this.osvg = svg // origin svg\r\n\r\n            // compute style\r\n            // document.body.appendChild(svg)\r\n\r\n            const basicElementArray = []\r\n            object.dfs(svg, function (element) {\r\n                // compute styles (include tagName), only keep basic\r\n                if (BASIC_SVG_ELEMENTS.has(element.tagName)) {\r\n                    const style = dom.getComputedStyle(element)\r\n                    basicElementArray.push({\r\n                        tagName: element.tagName,\r\n                        element,\r\n                        style,\r\n                    })\r\n                }\r\n            })\r\n            this.basicElementArray = basicElementArray\r\n\r\n            // document.body.removeChild(svg)\r\n        }\r\n    }\r\n\r\n    /**\r\n     * !Assume two arrays are equilong (equal length) and the sequences are same,\r\n     * compare whether this NLDComponents is diff with anotherNLDComponents.\r\n     * Only compare whether some styles of a basic svg element are different\r\n     * @param {NLDComponents} anotherNLDComponents\r\n     * @return {NLDComponents} diff: a NLDComponents which only stores differences\r\n     */\r\n    diffWith(anotherNLDComponents) {\r\n        const diff = new NLDCompDiff()\r\n        const n = Math.min(\r\n            this.basicElementArray.length,\r\n            anotherNLDComponents.basicElementArray.length\r\n        )\r\n        for (let i = 0; i < n; i++) {\r\n            const ele1 = this.basicElementArray[i]\r\n            const ele2 = anotherNLDComponents.basicElementArray[i]\r\n            let eleDiff = undefined\r\n            let channels\r\n            if (ele1.tagName == ele2.tagName) {\r\n                channels = new Set(\r\n                    Object.keys(ele1.style).concat(Object.keys(ele2.style))\r\n                )\r\n            } else {\r\n                // tagName is different\r\n                eleDiff = { tagName: true }\r\n                // is any other general channel different?\r\n                channels = COMMON_STYLE_CHANNELS\r\n            }\r\n            channels.forEach((channel) => {\r\n                if (!object.isEqual(ele1.style[channel], ele2.style[channel])) {\r\n                    if (!eleDiff) {\r\n                        eleDiff = { style: {} }\r\n                    }\r\n                    eleDiff.style = eleDiff.style ?? {}\r\n                    eleDiff.style[channel] = true\r\n                }\r\n            })\r\n            diff.array.push(eleDiff)\r\n        }\r\n        return diff\r\n    }\r\n}\r\n","/**\r\n * @create date 2021-03-07 20:18:51\r\n * @modify date 2021-03-07 20:18:51\r\n * @desc [description]\r\n */\r\nimport { NLDComponents } from './NLDComponents'\r\n/**\r\n * if structure\r\n * @param {html dom element} element1\r\n * @param {html dom element} element2\r\n * @return {NLDCompDiff} diff: a NLDCompDiff which extends Array: [{tagName: boolean, style:{[visual channel]: boolean}}]\r\n */\r\nexport default function compare(element1, element2) {\r\n    const NLDComponents1 = new NLDComponents(element1)\r\n    const NLDComponents2 = new NLDComponents(element2)\r\n    const diff = NLDComponents1.diffWith(NLDComponents2)\r\n    return diff\r\n}\r\n","import { Statistics } from \"statistics.js\"\r\nimport { BACKEND_URL } from \"../configs\"\r\nimport { calcDistance } from \"./graphDistance\"\r\n\r\nfunction computePearsonCorrelation(X, Y) {\r\n    // 计算相关系数r\r\n    // https://thisancog.github.io/statistics.js/inc/correlation.html\r\n    const data = []\r\n    for (let i = 0; i < X.length; i++) {\r\n        data.push({ x: X[i], y: Y[i] })\r\n    }\r\n    const columns = {\r\n        x: \"metric\",\r\n        y: \"metric\",\r\n    }\r\n    const stats = new Statistics(data, columns)\r\n    const r = stats.correlationCoefficient(\"x\", \"y\")\r\n    return r.correlationCoefficient\r\n}\r\n\r\nfunction computeKendallsTau(X, Y) {\r\n    // 计算Mann-Kendall Test for Trend\r\n    const data = []\r\n    for (let i = 0; i < X.length; i++) {\r\n        data.push({ x: X[i], y: Y[i] })\r\n    }\r\n\r\n    data.sort((a, b) => a.x - b.x)\r\n    const columns = {\r\n        x: \"ordinal\",\r\n        y: \"ordinal\",\r\n    }\r\n    const stats = new Statistics(data, columns)\r\n    const r = stats.kendallsTau(\"x\", \"y\")\r\n    return r.b.tauB\r\n}\r\n\r\nfunction checkDataType(array) {\r\n    // 无法转化成数字\r\n    for (let i = 0; i < array.length; i++) {\r\n        if (isNaN(parseFloat(array[i]))) {\r\n            return {\r\n                first: \"categorical\",\r\n                second: null,\r\n            }\r\n        }\r\n    }\r\n\r\n    // 个数小于5且都是整数\r\n    if (array.length <= 5 && array.every((x) => Number.isInteger(x))) {\r\n        return {\r\n            first: \"categorical\",\r\n            second: \"numerical\",\r\n        }\r\n    }\r\n\r\n    // unique的数量小于30%\r\n    if (new Set(array).size < array.length * 0.3) {\r\n        return {\r\n            first: \"categorical\",\r\n            second: \"numerical\",\r\n        }\r\n    }\r\n\r\n    return {\r\n        first: \"numerical\",\r\n        second: null,\r\n    }\r\n}\r\n\r\n// async function attributeRelation(X, Y) {\r\nfunction attributeRelation(X, Y, threshold = 0.6) {\r\n    // console.log(X, Y)\r\n    // 判断数据类型\r\n    let dataTypeX = checkDataType(X)\r\n    let dataTypeY = checkDataType(Y)\r\n    // let correlationTest = null\r\n\r\n    // 预先判断可能的数值类型\r\n    if (\r\n        (dataTypeX.first === \"numerical\" || dataTypeX.second === \"numerical\") &&\r\n        (dataTypeY.first === \"numerical\" || dataTypeY.second === \"numerical\")\r\n    ) {\r\n        X = X.map((x) => parseFloat(x))\r\n        Y = Y.map((y) => parseFloat(y))\r\n        // Pearson Correlation & Kendall's Tau\r\n        const pearsonCorrelation = computePearsonCorrelation(X, Y)\r\n        // const kendallsTau = computeKendallsTau(X, Y)\r\n        // const correlationTest = await fetch(BACKEND_URL + \"pearson-kendall\", {\r\n        //     method: \"POST\",\r\n        //     headers: {\r\n        //         \"Content-Type\": \"application/json\",\r\n        //     },\r\n        //     body: JSON.stringify({ X, Y }),\r\n        // }).then((res) => res.json())\r\n\r\n        if (\r\n            // correlationTest.pearson.pvalue < 0.05 &&\r\n            // correlationTest.kendall.pvalue < 0.05\r\n            Math.abs(pearsonCorrelation) > threshold\r\n        ) {\r\n            return {\r\n                typeX: \"numerical\",\r\n                typeY: \"numerical\",\r\n                correlation: pearsonCorrelation,\r\n                // pearson: correlationTest.pearson,\r\n                // kendall: correlationTest.kendall,\r\n            }\r\n        }\r\n    }\r\n\r\n    dataTypeX = dataTypeX.first\r\n    dataTypeY = dataTypeY.first\r\n\r\n    if (dataTypeX === \"numerical\" && dataTypeY === \"numerical\") {\r\n        X = X.map((x) => parseFloat(x))\r\n        Y = Y.map((y) => parseFloat(y))\r\n        // Pearson Correlation & Kendall's Tau\r\n        // const pearsonCorrelation = computePearsonCorrelation(X, Y)\r\n        // const kendallsTau = computeKendallsTau(X, Y)\r\n        // if (!correlationTest) {\r\n        //     correlationTest = await fetch(BACKEND_URL + \"pearson-kendall\", {\r\n        //         method: \"POST\",\r\n        //         headers: {\r\n        //             \"Content-Type\": \"application/json\",\r\n        //         },\r\n        //         body: JSON.stringify({ X, Y }),\r\n        //     }).then((res) => res.json())\r\n        // }\r\n\r\n        // console.log(correlationTest)\r\n        const pearsonCorrelation = computePearsonCorrelation(X, Y)\r\n\r\n        return {\r\n            typeX: dataTypeX,\r\n            typeY: dataTypeY,\r\n            correlation: pearsonCorrelation,\r\n            // pearson: correlationTest.pearson,\r\n            // kendall: correlationTest.kendall,\r\n        }\r\n    }\r\n\r\n    if (dataTypeY === \"categorical\") {\r\n        if (dataTypeX === \"categorical\") {\r\n            const map = {}\r\n            for (let i = 0; i < X.length; i++) {\r\n                if (!map[Y[i]]) {\r\n                    map[Y[i]] = new Set()\r\n                }\r\n                map[Y[i]].add(X[i])\r\n            }\r\n            for (const k in map) {\r\n                map[k] = Array.from(map[k])\r\n            }\r\n\r\n            return {\r\n                typeX: dataTypeX,\r\n                typeY: dataTypeY,\r\n                attributeMapping: map,\r\n            }\r\n        } else {\r\n            const map = {}\r\n            for (let i = 0; i < X.length; i++) {\r\n                if (!map[Y[i]]) {\r\n                    map[Y[i]] = { min: Number.MAX_VALUE, max: Number.MIN_VALUE }\r\n                }\r\n                map[Y[i]].min = Math.min(map[Y[i]].min, X[i])\r\n                map[Y[i]].max = Math.max(map[Y[i]].max, X[i])\r\n            }\r\n\r\n            return {\r\n                typeX: dataTypeX,\r\n                typeY: dataTypeY,\r\n                attributeMapping: map,\r\n            }\r\n        }\r\n    }\r\n\r\n    return undefined\r\n}\r\n\r\nfunction layoutRelation(graph) {\r\n    let { euclidMatrix, floydMatrix } = calcDistance(graph)\r\n    const N = euclidMatrix.length\r\n    floydMatrix = floydMatrix.flat()\r\n    euclidMatrix = euclidMatrix.flat()\r\n    const combined = []\r\n    for (let i = 0; i < floydMatrix.length; i++) {\r\n        combined.push({\r\n            floyd: floydMatrix[i],\r\n            euclid: euclidMatrix[i],\r\n        })\r\n    }\r\n    combined.sort((a, b) => (a.floyd - b.floyd))\r\n    const data = combined.slice(N)\r\n    // 计算相关系数r\r\n    // https://thisancog.github.io/statistics.js/inc/correlation.html\r\n    const columns = {\r\n        floyd: 'metric',\r\n        euclid: 'metric',\r\n    }\r\n    const stats = new Statistics(data, columns)\r\n    const r = stats.correlationCoefficient('floyd', 'euclid')\r\n    return r.correlationCoefficient\r\n}\r\n\r\n// debug\r\n\r\n/*\r\nconst X = [1, 1, 1, 1, 1, 1, 1, 1]\r\nconst Y = ['a', 'b', 'c', 'd', 'a', 'b', 'c', 'd']\r\n\r\nconsole.log(attributeRelation(X, Y))\r\n*/\r\n\r\nexport {\r\n    attributeRelation,\r\n    layoutRelation,\r\n}\r\n","function calcEulerDistance(graph) {\r\n    const N = graph.nodes.length\r\n    const matrix = Array(N).fill().map(() => Array(N).fill(0))\r\n    const idToIdx = {}\r\n    graph.nodes.forEach((n, i) => {\r\n        idToIdx[n.id] = i\r\n    })\r\n\r\n    graph.nodes.forEach((a, i) => {\r\n        graph.nodes.forEach((b, j) => {\r\n            if (i !== j)\r\n                matrix[i][j] = Math.sqrt((a.x - b.x) ** 2 + (a.y - b.y) ** 2)\r\n        })\r\n    })\r\n\r\n    return matrix\r\n}\r\n\r\nfunction floyd(graph) {\r\n    let INF = Infinity;\r\n    const id_to_index = new Map();\r\n    let n = graph[\"nodes\"].length;\r\n    let matrix = [];\r\n\r\n    for (let i = 0; i < n; ++i) {\r\n        id_to_index.set(graph[\"nodes\"][i][\"id\"], i);\r\n\r\n        const unit = [];\r\n        for (let j = 0; j < n; ++j) {\r\n            unit.push(INF);\r\n        }\r\n        matrix.push(unit);\r\n    }\r\n\r\n    for (let i = 0; i < n; ++i) {\r\n        matrix[i][i] = 0;\r\n    }\r\n\r\n    for (let i = 0; i < graph[\"links\"].length; ++i) {\r\n        let fr = id_to_index.get(graph[\"links\"][i][\"source\"]);\r\n        let to = id_to_index.get(graph[\"links\"][i][\"target\"]);\r\n        matrix[fr][to] = 1\r\n        matrix[to][fr] = 1\r\n    }\r\n\r\n    for (let k = 0; k < n; ++k) {\r\n        for (let i = 0; i < n; ++i) {\r\n            for (let j = 0; j < n; ++j) {\r\n                if (matrix[i][k] + matrix[k][j] < matrix[i][j]) {\r\n                    matrix[i][j] = matrix[i][k] + matrix[k][j];\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    return matrix;\r\n}\r\n\r\nfunction calcDistance(graph) {\r\n    const N = graph.nodes.length\r\n    const idToIdx = {}\r\n    graph.nodes.forEach((n, i) => {\r\n        idToIdx[n.id] = i\r\n    })\r\n\r\n    const euclidMatrix = Array(N).fill().map(() => Array(N).fill(0))\r\n    graph.nodes.forEach((a, i) => {\r\n        graph.nodes.forEach((b, j) => {\r\n            if (i !== j)\r\n                euclidMatrix[i][j] = Math.sqrt((a.x - b.x) ** 2 + (a.y - b.y) ** 2)\r\n        })\r\n    })\r\n\r\n    const floydMatrix = Array(N).fill().map(() => Array(N).fill(Infinity))\r\n    for (let i = 0; i < N; ++i) {\r\n        floydMatrix[i][i] = 0;\r\n    }\r\n\r\n    for (let i = 0; i < graph[\"links\"].length; ++i) {\r\n        let fr = idToIdx[graph[\"links\"][i][\"source\"]];\r\n        let to = idToIdx[graph[\"links\"][i][\"target\"]];\r\n        floydMatrix[fr][to] = 1\r\n        floydMatrix[to][fr] = 1\r\n    }\r\n\r\n    for (let k = 0; k < N; ++k) {\r\n        for (let i = 0; i < N; ++i) {\r\n            for (let j = 0; j < N; ++j) {\r\n                if (floydMatrix[i][k] + floydMatrix[k][j] < floydMatrix[i][j]) {\r\n                    floydMatrix[i][j] = floydMatrix[i][k] + floydMatrix[k][j];\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    return {\r\n        euclidMatrix,\r\n        floydMatrix\r\n    }\r\n}\r\n\r\nexport {\r\n    calcDistance\r\n}","import * as d3 from \"d3\"\r\nimport compare from \"./compare\"\r\nimport { object, NoLinDiagram } from \"./utils\"\r\nimport { NLDComponents } from \"./NLDComponents\"\r\nimport { CONNECTOR_CHAR, SHARED_CHANNELS } from \"./global\"\r\nimport { attributeRelation } from \"../attributeRelation/attributeRelation\"\r\n\r\n/**\r\n *\r\n * @param {Object} graph: standard node-link data format\r\n * @param {Function} func: the function that takes data as input and generate a node-link diagram (svg format)\r\n * @param {String} entityType: 'nodes' | 'links'\r\n * @param {Dict} entity2element: {entityIndex => elementIndex}\r\n * @param {Dict} element2label: {elementIndex => label}\r\n */\r\nexport function mapAttribute2Channel(\r\n    graph,\r\n    func,\r\n    entityType,\r\n    entity2element,\r\n    element2label\r\n) {\r\n    // Step1: Eliminate random encoding\r\n    const svg = func(d3, object.deepcopy(graph))\r\n    const svgBeta = func(d3, object.deepcopy(graph))\r\n    const unstableComponents = compare(svg, svgBeta)\r\n\r\n    // Step2: shuffle all attributes, find which channels are influnced\r\n    const attributes = NoLinDiagram.getAttributesOf(\r\n        graph\r\n    ) /* Map(name <=> {entityType, range}) */\r\n    const svgOrigin = func(d3, object.deepcopy(graph))\r\n    const nldOrigin = new NLDComponents(svgOrigin)\r\n    const label2attr2diff = {}\r\n    for (let [name, { type, range }] of attributes[entityType].entries()) {\r\n        // Step2.1: shuffle and generate\r\n        const shuffledGraph = object.deepcopy(graph)\r\n        const shuffledRange = d3.shuffle(range.slice())\r\n        shuffledGraph[entityType].forEach((entity, i) => {\r\n            const CONNECTOR = \"@\"\r\n            if (name.indexOf(CONNECTOR) > 0) {\r\n                entity[name.split(CONNECTOR)[0]][name.split(CONNECTOR)[1]] =\r\n                    shuffledRange[i]\r\n            } else {\r\n                entity[name] = shuffledRange[i]\r\n            }\r\n        })\r\n        const svgShuffled = func(d3, shuffledGraph)\r\n        const nldShuffled = new NLDComponents(svgShuffled)\r\n        const diffs = nldOrigin.diffWith(nldShuffled)\r\n\r\n        if (!unstableComponents.isEmpty()) {\r\n            diffs.eliminate(unstableComponents)\r\n        }\r\n        if (diffs.isEmpty()) {\r\n            // if this attribute cannot cause any change to svg\r\n            // no need to test it\r\n            continue\r\n        }\r\n\r\n        // Step2.2: merge diffs by label\r\n        diffs.array.forEach((diffItem, elementIndex) => {\r\n            if (diffItem) {\r\n                const label = element2label[elementIndex]\r\n                if (label != undefined && label != \"undefined\") {\r\n                    label2attr2diff[label] = label2attr2diff[label] ?? {}\r\n                    const attr2diff = label2attr2diff[label]\r\n                    attr2diff[name] = attr2diff[name] ?? {}\r\n                    if (diffItem.style) {\r\n                        Object.keys(diffItem.style).forEach((channel) => {\r\n                            if (SHARED_CHANNELS.has(channel)) {\r\n                                // e.g. ellipse and rect share rx and ry\r\n                                const tagName =\r\n                                    nldShuffled.basicElementArray[elementIndex]\r\n                                        .tagName\r\n                                diffItem.style[channel + \".\" + tagName] =\r\n                                    diffItem.style[channel]\r\n                                delete diffItem.style[channel]\r\n                            }\r\n                        })\r\n                    }\r\n                    attr2diff[name] = mergeDiff(diffItem, attr2diff[name])\r\n                }\r\n            }\r\n        })\r\n    }\r\n\r\n    // Step3: compute correlations\r\n    // compute label2elements, element2entity\r\n    const label2elements = {}\r\n    const element2entity = []\r\n    element2label.forEach((label, elementIndex) => {\r\n        if (!label2elements[label]) {\r\n            label2elements[label] = new Set()\r\n        }\r\n        label2elements[label].add(elementIndex)\r\n    })\r\n    entity2element.forEach((eleIndexSet, entityIndex) => {\r\n        eleIndexSet.forEach((eleIndex) => {\r\n            element2entity[eleIndex] = entityIndex\r\n        })\r\n    })\r\n\r\n    for (let label in label2attr2diff) {\r\n        const attr2diff = label2attr2diff[label]\r\n        for (let attr in attr2diff) {\r\n            const diff = attr2diff[attr]\r\n            const channelNames = []\r\n            // record channelNames\r\n            if (diff.tagName) {\r\n                channelNames.push(\"tagName\")\r\n            }\r\n            if (diff.style) {\r\n                for (let channel in diff.style) {\r\n                    diff.style[channel] && channelNames.push(channel)\r\n                }\r\n            }\r\n            // record channel values\r\n            const channels = {}\r\n            channelNames.forEach((name) => {\r\n                channels[name] = []\r\n            })\r\n            label2elements[label].forEach((elementIndex) => {\r\n                const entityIndex = element2entity[elementIndex]\r\n                const element = nldOrigin.basicElementArray[elementIndex]\r\n                let attrVal = graph[entityType][entityIndex][attr]\r\n                const CONNECTOR = \"@\"\r\n                if (attr.indexOf(CONNECTOR) > 0) {\r\n                    attrVal =\r\n                        graph[entityType][entityIndex][\r\n                            attr.split(CONNECTOR)[0]\r\n                        ][attr.split(CONNECTOR)[1]]\r\n                }\r\n\r\n                channelNames.forEach((name) => {\r\n                    if (name === \"tagName\") {\r\n                        channels[name][entityIndex] = [attrVal, element.tagName]\r\n                    } else {\r\n                        channels[name][entityIndex] = [\r\n                            attrVal,\r\n                            element.style[name.split(\".\")[0]],\r\n                        ]\r\n                    }\r\n                })\r\n            })\r\n\r\n            for (let i = 0; i < channelNames.length; i++) {\r\n                const name = channelNames[i]\r\n                channels[name] = channels[name].filter(([attrVal, chanVal]) => {\r\n                    return (\r\n                        chanVal !== undefined &&\r\n                        chanVal !== \"auto\" &&\r\n                        chanVal !== \"undefined\"\r\n                    )\r\n                })\r\n                const x = channels[name].map((_) => _[0])\r\n                const y = channels[name].map((_) => _[1])\r\n                let indepVariable = x\r\n                let depVariable = y\r\n                // if (x.some((_) => Array.isArray(_))) {\r\n                //     for (let i = 0; i < x[0].length; i++) {\r\n                //         // assume it is a equal-length array\r\n                //         indepVariable = x.map((_) => _[i])\r\n                //         attributeRelation(\r\n                //             indepVariable,\r\n                //             depVariable\r\n                //         ).then((relation) => {})\r\n                //     }\r\n                // } else {\r\n                // const relation = await attributeRelation(\r\n                const relation = attributeRelation(\r\n                    indepVariable,\r\n                    depVariable\r\n                )\r\n\r\n                if (relation) {\r\n                    if (\r\n                        relation.typeX === \"numerical\" &&\r\n                        relation.typeY === \"categorical\"\r\n                    )\r\n                        debugger\r\n                    if (name === \"tagName\") {\r\n                        diff.tagName = relation\r\n                    } else {\r\n                        diff.style[name] = relation\r\n                    }\r\n                }\r\n                // }\r\n            }\r\n        }\r\n    }\r\n    // console.log(label2attr2diff)\r\n    return label2attr2diff\r\n\r\n    function mergeDiff(diff1, diff2) {\r\n        const mergedDiff = {}\r\n        const diffs = [diff1, diff2]\r\n        diffs.forEach((diff) => {\r\n            if (diff.tagName) {\r\n                mergedDiff.tagName |= diff.tagName\r\n            }\r\n            if (diff.style) {\r\n                for (let channel in diff.style) {\r\n                    mergedDiff.style = mergedDiff.style ?? {}\r\n                    mergedDiff.style[channel] |= diff.style[channel]\r\n                }\r\n            }\r\n        })\r\n        return mergedDiff\r\n    }\r\n}\r\n\r\n/**\r\n *\r\n * @param {Object} graph: standard node-link data format\r\n * @param {Function} func: the function that takes data as input and generate a node-link diagram (svg format)\r\n * @param {String} entityType: 'nodes' | 'links'\r\n */\r\nexport function mapEntity2Element(graph, func, entityType) {\r\n    // Step1: Eliminate random encoding\r\n    const svg = func(d3, object.deepcopy(graph))\r\n    const svgBeta = func(d3, object.deepcopy(graph))\r\n    const unstableComponents = compare(svg, svgBeta)\r\n\r\n    // Step2: Get the Mapping\r\n    const entity2element = new Array(graph[entityType].length) // : [[entityIndex]: Set(elementIndex)]\r\n    const svgOrigin = func(d3, object.deepcopy(graph))\r\n\r\n    // Step2.2: get the mapping by swapping entities\r\n    // swap two entities\r\n    // we assume that it will not change the element sequence\r\n    const labelsOfElements = []\r\n    labelsOfElements.max = 0\r\n    const swapCache = new Map()\r\n    for (let i = 0; i < graph[entityType].length; i++) {\r\n        console.log(\r\n            `%c For %c${entityType}%c's attribute, computing %c${entityType}%c[%c${i}/${graph[entityType].length}%c]'s encoding...`,\r\n            \"background: #222; color: #bada55\",\r\n            \"background: #222; color: #d94e54\",\r\n            \"background: #222; color: #bada55\",\r\n            \"background: #222; color: #d94e54\",\r\n            \"background: #222; color: #bada55\",\r\n            \"background: #222; color: #d94e54\",\r\n            \"background: #222; color: #bada55\"\r\n        )\r\n\r\n        let clonedGraph = object.deepcopy(graph)\r\n        let thisEntity = clonedGraph[entityType][i]\r\n        let svgControl = svgOrigin\r\n\r\n        // Step2.2.1 find all entities that don't have totally same attributes with entities[i]\r\n        let entitiesWithDiffAttr_INDEX = findEntitiesWithDiffAttr_INDEX(\r\n            thisEntity,\r\n            clonedGraph\r\n        )\r\n        function findEntitiesWithDiffAttr_INDEX(thisEntity, graph) {\r\n            let entitiesWithDiffAttr_INDEX = [] // entities with different attribute (just stores index)\r\n            let valueStack = []\r\n            function isAttributesAllSame(entity) {\r\n                return !Object.keys(thisEntity).some(\r\n                    (name) =>\r\n                        name !== \"id\" &&\r\n                        name !== \"source\" &&\r\n                        name !== \"target\" &&\r\n                        !object.isEqual(thisEntity[name], entity[name])\r\n                )\r\n            }\r\n            graph[entityType].forEach((entity, j) => {\r\n                if (!isAttributesAllSame(entity)) {\r\n                    if (\r\n                        valueStack.every(\r\n                            (value) => !isAttributesAllSame(value, entity)\r\n                        )\r\n                    ) {\r\n                        entitiesWithDiffAttr_INDEX.push(j)\r\n                    }\r\n                }\r\n            })\r\n            return entitiesWithDiffAttr_INDEX\r\n        }\r\n\r\n        // Step2.2.2 swap thisEntity with each of entities with at least one different attribute\r\n        if (entitiesWithDiffAttr_INDEX.length == 0) {\r\n            console.error(\r\n                \"All entities have same attribute, algorithm can not detect any encoding.\"\r\n            )\r\n            debugger // some thing wrong, all entities have same attribute\r\n        } else if (entitiesWithDiffAttr_INDEX.length == 1) {\r\n            // only one entity is different with thisEntity\r\n            // first swap with the diff entity\r\n            const j = entitiesWithDiffAttr_INDEX[0]\r\n            clonedGraph[entityType][i] = clonedGraph[entityType][j]\r\n            clonedGraph[entityType][j] = thisEntity\r\n            thisEntity = clonedGraph[entityType][i]\r\n            // second re-find entities with different attribute\r\n            entitiesWithDiffAttr_INDEX = findEntitiesWithDiffAttr_INDEX(\r\n                thisEntity,\r\n                clonedGraph\r\n            )\r\n            // if still only one entity diff with thisEntity, can not deal with such case\r\n            if (entitiesWithDiffAttr_INDEX.length == 1) {\r\n                console.error(\r\n                    `Cannot deal with ${entityType}[${i}], only one ${entityType.slice(\r\n                        0,\r\n                        -1\r\n                    )} diffs with it.`\r\n                )\r\n                debugger\r\n            } else {\r\n                // re-generate the control group svg\r\n                svgControl = func(d3, object.deepcopy(clonedGraph))\r\n            }\r\n        }\r\n\r\n        // swap this entity with any other diff entities\r\n        const elementFrequency = {}\r\n        const nldControl = new NLDComponents(svgControl)\r\n        entitiesWithDiffAttr_INDEX.forEach((entityIndex) => {\r\n            const entity = clonedGraph[entityType][entityIndex]\r\n\r\n            clonedGraph[entityType][i] = entity\r\n            clonedGraph[entityType][entityIndex] = thisEntity\r\n            thisEntity = clonedGraph[entityType][i]\r\n\r\n            let nldBeforeSwap, nldAfterSwap, indexofSwapDiff\r\n            const key = `${entityIndex}${CONNECTOR_CHAR}${i}`\r\n\r\n            if (swapCache.has(key)) {\r\n                ;[nldBeforeSwap, nldAfterSwap, indexofSwapDiff] = swapCache.get(\r\n                    key\r\n                )\r\n            }\r\n\r\n            if (!nldBeforeSwap && !nldAfterSwap && !indexofSwapDiff) {\r\n                nldBeforeSwap = nldControl\r\n                const svgAfterSwap = func(d3, object.deepcopy(clonedGraph))\r\n                nldAfterSwap = new NLDComponents(svgAfterSwap)\r\n                const swapDiff = nldBeforeSwap.diffWith(nldAfterSwap)\r\n\r\n                if (!unstableComponents.isEmpty()) {\r\n                    swapDiff.eliminate(unstableComponents)\r\n                }\r\n\r\n                indexofSwapDiff = swapDiff.getIndexOfDifferences()\r\n                swapCache.set(`${i}${CONNECTOR_CHAR}${entityIndex}`, [\r\n                    nldBeforeSwap,\r\n                    nldAfterSwap,\r\n                    indexofSwapDiff,\r\n                ])\r\n            }\r\n\r\n            indexofSwapDiff.forEach((elementIndex) => {\r\n                if (!elementFrequency[elementIndex]) {\r\n                    elementFrequency[elementIndex] = 0\r\n                }\r\n                elementFrequency[elementIndex] += 1\r\n                if (elementFrequency[elementIndex] >= 2) {\r\n                    // occurs more than once, it should be entity[i]'s element\r\n                    if (!entity2element[i]) {\r\n                        entity2element[i] = new Set()\r\n                    }\r\n                    entity2element[i].add(elementIndex)\r\n                }\r\n                // compare which elements of nldSwapped is same with nldBeforeSwap\r\n                // if (entityType == \"links\") debugger\r\n                indexofSwapDiff.forEach((elementJndex) => {\r\n                    if (\r\n                        elementIndex !== elementJndex &&\r\n                        object.isEqual(\r\n                            {\r\n                                style:\r\n                                    nldBeforeSwap.basicElementArray[\r\n                                        elementIndex\r\n                                    ].style,\r\n                                tagName:\r\n                                    nldBeforeSwap.basicElementArray[\r\n                                        elementIndex\r\n                                    ].tagName,\r\n                            },\r\n                            {\r\n                                style:\r\n                                    nldAfterSwap.basicElementArray[elementJndex]\r\n                                        .style,\r\n                                tagName:\r\n                                    nldAfterSwap.basicElementArray[elementJndex]\r\n                                        .tagName,\r\n                            }\r\n                        )\r\n                    ) {\r\n                        if (\r\n                            labelsOfElements[elementIndex] &&\r\n                            !labelsOfElements[elementJndex]\r\n                        ) {\r\n                            labelsOfElements[elementJndex] =\r\n                                labelsOfElements[elementIndex]\r\n                        } else if (\r\n                            !labelsOfElements[elementIndex] &&\r\n                            labelsOfElements[elementJndex]\r\n                        ) {\r\n                            labelsOfElements[elementIndex] =\r\n                                labelsOfElements[elementJndex]\r\n                        } else if (\r\n                            !labelsOfElements[elementIndex] &&\r\n                            !labelsOfElements[elementJndex]\r\n                        ) {\r\n                            labelsOfElements[elementIndex] = labelsOfElements[\r\n                                elementJndex\r\n                            ] = ++labelsOfElements.max\r\n                        } else {\r\n                            if (\r\n                                labelsOfElements[elementIndex] !=\r\n                                labelsOfElements[elementJndex]\r\n                            )\r\n                                debugger\r\n                        }\r\n                    }\r\n                })\r\n            })\r\n\r\n            // swap back\r\n            clonedGraph[entityType][i] = clonedGraph[entityType][entityIndex]\r\n            clonedGraph[entityType][entityIndex] = thisEntity\r\n            thisEntity = clonedGraph[entityType][i]\r\n        })\r\n    }\r\n    return [entity2element, labelsOfElements]\r\n}\r\n","function TitleBar({ text }) {\r\n    return (\r\n        <div\r\n            style={{\r\n                width: \"100vw\",\r\n                height: 60,\r\n                lineHeight: '60px',\r\n                borderBottom: \"1px solid #dfdfdf\",\r\n                fontFamily: \"Times\",\r\n                fontSize: 35,\r\n                fontWeight: \"600\",\r\n                textIndent: 30,\r\n                position: 'fixed',\r\n                top: 0,\r\n                zIndex: 1000,\r\n                backgroundColor: 'white',\r\n            }}\r\n        >{\r\n                text ? text : 'Graph Descriptor'\r\n            }</div>\r\n    )\r\n}\r\n\r\nexport {\r\n    TitleBar\r\n}","import { findSimiliarColor } from './color'\r\n\r\nfunction processValue(value) {\r\n    // 如果有@符号，变成方括号表达\r\n    if (typeof value === 'string' && value.includes('@')) {\r\n        value = value.replace(/@(.*)/g, (_, x) => { return `[${x}]` })\r\n    } else if (value === 'r') {\r\n        value = 'radius'\r\n    }\r\n    return value\r\n}\r\n\r\nexport function styleParameter(parameter) {\r\n    let type = ''\r\n    let value = ''\r\n    if (parameter.type) {\r\n        type = parameter.type\r\n        value = parameter.value\r\n    } else {\r\n        value = parameter\r\n    }\r\n\r\n    if (Array.isArray(value)) {\r\n        return value.map(\r\n            (_) => `<span class='description-parameter ${type}'>${processValue(_)}</span>`\r\n            // (_) => styleParameter(_)\r\n        )\r\n    }\r\n\r\n    value = processValue(value)\r\n\r\n    // 判断是颜色\r\n    if (/^#(?:[0-9a-fA-F]{3}){1,2}$/.test(value)) {\r\n        const name = findSimiliarColor(value)\r\n        return `<span class='description-parameter ${type}'>${name}(<span style='color: ${value};'>&#9724;</span>${value})</span>`\r\n    }\r\n\r\n    return `<span class='description-parameter ${type}'>${value}</span>`\r\n}","import React from \"react\"\r\n\r\nimport { CodeEditorPanel } from \"./panels/CodeEditorPanel\"\r\nimport { DataEditorPanel } from \"./panels/DataEditorPanel\"\r\nimport { VisualizationPanel } from \"./panels/VisualizationPanel\"\r\nimport { VisualizationGivenDataPanel } from \"./panels/VisualizationGivenDataPanel\"\r\nimport { DescriptionPanel } from \"./panels/DescriptionPanel\"\r\nimport { getPreloadData } from \"./demo/demo\"\r\nimport { useEffect, useState } from \"react\"\r\nimport { useParams } from \"react-router\"\r\nimport { linkCondition } from \"./linkConditions/linkCondition\"\r\nimport descriptor from \"./descriptor\"\r\nimport * as d3 from \"d3\"\r\nimport { object, svgToArray } from \"./descriptor/utils\"\r\nimport { TitleBar } from \"./components/TitleBar\"\r\nimport { styleParameter } from \"./utils/parameterStyle\"\r\n\r\nfunction Main({ title }) {\r\n    const [runID, setRunID] = useState(0)\r\n    const [loading, setLoading] = useState(false)\r\n    const [dataStr, setDataStr] = useState(\"\")\r\n    const [codeStr, setCodeStr] = useState(\"\")\r\n    const [SVG, setSVG] = useState(document.createElement(\"svg\"))\r\n    const [visibleElements, setVisibleElements] = useState([])\r\n    const [graphDescripitons, setGraphDescriptions] = useState({})\r\n    const [layoutDescriptions, setLayoutDescriptions] = useState({})\r\n    const [linkConditions, setLinkConditions] = useState([])\r\n\r\n    // read url parameters\r\n    const { demo } = useParams()\r\n\r\n    useEffect(() => {\r\n        if (demo) {\r\n            getPreloadData(demo).then(({ dataStr, codeStr, preload }) => {\r\n                setDataStr(dataStr)\r\n                setCodeStr(codeStr)\r\n\r\n                if (preload) {\r\n                    const _ = document.createElement(\"div\")\r\n                    _.innerHTML = preload.svg\r\n                    const svg = _.firstChild\r\n                    setSVG(svg)\r\n                    // 根据index更新elements\r\n\r\n                    const allElements = svgToArray(svg)\r\n                    const descriptions = preload.descriptions\r\n                    const layoutDescriptions = preload.layoutDescriptions\r\n\r\n                    descriptions.forEach((description) => {\r\n                        object.dfs(description, (desc) => {\r\n                            // desc.elements = undefined\r\n                            if (desc.elementsIdx) {\r\n                                desc.elements = desc.elementsIdx.map(\r\n                                    (idx) => allElements[idx]\r\n                                )\r\n                            }\r\n                        })\r\n                    })\r\n\r\n                    layoutDescriptions.forEach((description) => {\r\n                        object.dfs(description, (desc) => {\r\n                            // desc.elements = undefined\r\n                            if (desc.elementsIdx) {\r\n                                desc.elements = desc.elementsIdx.map(\r\n                                    (idx) => allElements[idx]\r\n                                )\r\n                            }\r\n                        })\r\n                    })\r\n\r\n                    // setLoading(false)\r\n                    setVisibleElements(allElements)\r\n                    setGraphDescriptions(descriptions)\r\n                    setLayoutDescriptions(layoutDescriptions)\r\n                }\r\n            })\r\n        }\r\n    }, [demo])\r\n\r\n    useEffect(() => {\r\n        if (runID === 0) return\r\n        // async function fetchEncodingDescriptions() {\r\n        function fetchEncodingDescriptions() {\r\n            try {\r\n                const data = JSON.parse(dataStr)\r\n                let {\r\n                    svg,\r\n                    allElements,\r\n                    descriptions,\r\n                    layoutDescriptions,\r\n                    // } = await descriptor(codeStr, data)\r\n                } = descriptor(codeStr, data)\r\n\r\n                /*\r\n                // ///////// 用来存储计算出来得数据 //////////\r\n                const svgStr = new XMLSerializer().serializeToString(svg)\r\n\r\n                descriptions.forEach((description) => {\r\n                    object.dfs(description, (desc) => {\r\n                        delete desc.elements\r\n                        desc.content = desc.template(\r\n                            ...desc.parameters.map(styleParameter)\r\n                        )\r\n                    })\r\n                })\r\n\r\n                layoutDescriptions.forEach((description) => {\r\n                    object.dfs(description, (desc) => {\r\n                        delete desc.elements\r\n                        desc.content = desc.template(\r\n                            ...desc.parameters.map(styleParameter)\r\n                        )\r\n                    })\r\n                })\r\n\r\n                const preloadData = {\r\n                    svg: svgStr,\r\n                    descriptions,\r\n                    layoutDescriptions,\r\n                }\r\n                console.log(JSON.stringify(preloadData))\r\n                ///////// 计算代码结束 ////////\r\n                */\r\n\r\n                descriptions.forEach((description) => {\r\n                    object.dfs(description, (desc) => {\r\n                        desc.content = desc.template(\r\n                            ...desc.parameters.map(styleParameter)\r\n                        )\r\n                    })\r\n                })\r\n\r\n                layoutDescriptions.forEach((description) => {\r\n                    object.dfs(description, (desc) => {\r\n                        desc.content = desc.template(\r\n                            ...desc.parameters.map(styleParameter)\r\n                        )\r\n                    })\r\n                })\r\n\r\n                setSVG(svg)\r\n                setVisibleElements(allElements)\r\n                setGraphDescriptions(descriptions)\r\n                setLayoutDescriptions(layoutDescriptions)\r\n                setLoading(false)\r\n            } catch (e) {\r\n                console.error(\"invalid code or dataset.\")\r\n                console.error(e)\r\n            }\r\n        }\r\n        fetchEncodingDescriptions()\r\n    }, [runID])\r\n\r\n    useEffect(() => {\r\n        try {\r\n            const conditions = linkCondition(JSON.parse(dataStr), 0.8)\r\n            setLinkConditions(conditions)\r\n        } catch (e) {\r\n            console.error(\"Invalid dataset\")\r\n            setLinkConditions([])\r\n        }\r\n    }, [dataStr])\r\n\r\n    return (\r\n        <div style={{}}>\r\n            <TitleBar text={title} />\r\n            <div\r\n                style={{\r\n                    width: \"80%\",\r\n                    maxWidth: 1000,\r\n                    position: \"absolute\",\r\n                    left: \"50%\",\r\n                    transform: \"translate(-50%)\",\r\n                    marginTop: 70,\r\n                    paddingBottom: 70,\r\n                    // height: \"calc(100vh - 80px)\",\r\n                    display: \"flex\",\r\n                    flexDirection: \"column\",\r\n                }}\r\n            >\r\n                <VisualizationGivenDataPanel\r\n                    style={{\r\n                        margin: 5,\r\n                    }}\r\n                    svg={SVG}\r\n                />\r\n                <div\r\n                    // id=\"desc-code-data\"\r\n                    style={\r\n                        {\r\n                            // flex: 1,\r\n                            // height: 0,\r\n                        }\r\n                    }\r\n                >\r\n                    <DescriptionPanel\r\n                        loading={loading}\r\n                        linkConditions={linkConditions}\r\n                        graphDescriptions={graphDescripitons}\r\n                        layoutDescriptions={layoutDescriptions}\r\n                        visibleElements={visibleElements}\r\n                    />\r\n                    <CodeEditorPanel\r\n                        codeStr={codeStr}\r\n                        setCodeStr={setCodeStr}\r\n                        submit={() => {\r\n                            setLoading(true)\r\n                            setRunID(runID + 1)\r\n                        }}\r\n                        style={{}}\r\n                    />\r\n                    <DataEditorPanel\r\n                        dataStr={dataStr}\r\n                        setDataStr={setDataStr}\r\n                        style={{}}\r\n                    />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport { Main }\r\n","/* eslint-disable no-loop-func */\r\n/**\r\n * @create date 2021-02-20 13:08:16\r\n * @modify date 2021-02-20 13:08:16\r\n * @desc entry of the repo\r\n */\r\nimport * as d3 from \"d3\"\r\nimport { mapEntity2Element, mapAttribute2Channel } from \"./entity2element\"\r\nimport { NLDComponents } from \"./NLDComponents\"\r\nimport {\r\n    BASIC_SVG_ELEMENTS,\r\n    COMMON_STYLE_CHANNELS,\r\n    COMMON_POSITION_CHANNELS,\r\n    DESCRIPTION_TEMPLATE,\r\n    PARAMETER_TYPE,\r\n} from \"./global\"\r\nimport {\r\n    NoLinDiagram,\r\n    number2ordinal,\r\n    object,\r\n    textualizeStringArray,\r\n} from \"./utils\"\r\nimport {\r\n    attributeRelation,\r\n    layoutRelation,\r\n} from \"../attributeRelation/attributeRelation\"\r\nimport { BACKEND_URL } from \"../configs\"\r\n\r\n/**\r\n *\r\n * @param {string} code\r\n * @param {standard node-link data format} data\r\n */\r\n// export default async function descriptor(code, oridata) {\r\nexport default function descriptor(code, oridata, threshold = 0.6) {\r\n    // only keep string number undefined boolean array\r\n    const data = object.deepcopy(oridata)\r\n    const beginTime = performance.now()\r\n    // eslint-disable-next-line no-new-func\r\n    const func = new Function(\"d3\", \"data\", code)\r\n    const svg = func(d3, object.deepcopy(data))\r\n    const nldComponents = new NLDComponents(svg)\r\n\r\n    // Step1: Map Entities to Elements, Map Attributes to Channels\r\n    // entity2element: [[entityIndex]: Set(elementIndex)]\r\n    console.log(\r\n        `%c Computing nodes' encodings...`,\r\n        \"background: #222; color: #bada55\"\r\n    )\r\n    console.log(\r\n        `%c Computing links' encodings...`,\r\n        \"background: #222; color: #bada55\"\r\n    )\r\n\r\n    let [node2element, nodeElement2label] = mapEntity2Element(\r\n        data,\r\n        func,\r\n        \"nodes\"\r\n    )\r\n\r\n    let [link2element, linkElement2label] = mapEntity2Element(\r\n        data,\r\n        func,\r\n        \"links\"\r\n    )\r\n\r\n    // Step2: Remove Links' elements from node results\r\n    // if link2element shares same elements with node2element,\r\n    // we should remove them from node2element\r\n    const element2link = []\r\n    for (let i = 0; i < link2element.length; i++) {\r\n        link2element[i]?.forEach((elementIndex) => {\r\n            if (element2link[elementIndex] !== undefined) {\r\n                // one element cannot correspond to several links\r\n                debugger\r\n            }\r\n            element2link[elementIndex] = i\r\n        })\r\n    }\r\n\r\n    // Remove link2element from node2element\r\n    for (let i = 0; i < node2element.length; i++) {\r\n        // i: nodeIndex\r\n        const node2element_i = new Set()\r\n        node2element[i]?.forEach((elementIndex) => {\r\n            if (element2link[elementIndex] === undefined) {\r\n                // the element does not correspond to a link, add it to node2element\r\n                node2element_i.add(elementIndex)\r\n            } else {\r\n                delete nodeElement2label[elementIndex]\r\n            }\r\n        })\r\n        node2element[i] = node2element_i\r\n    }\r\n\r\n    let linkElements = new Set()\r\n    link2element.forEach((linkset) => {\r\n        linkset.forEach((elementIndex) => {\r\n            linkElements.add(elementIndex)\r\n        })\r\n    })\r\n\r\n    node2element.forEach((nodeset) => {\r\n        nodeset.forEach((elementIndex) => {\r\n            if (linkElements.has(elementIndex)) {\r\n                debugger\r\n            }\r\n        })\r\n    })\r\n\r\n    // const nodeLabel2attr2diff = await mapAttribute2Channel(\r\n    const nodeLabel2attr2diff = mapAttribute2Channel(\r\n        data,\r\n        func,\r\n        \"nodes\",\r\n        node2element,\r\n        nodeElement2label\r\n    )\r\n\r\n    // const linkLabel2attr2diff = await mapAttribute2Channel(\r\n    const linkLabel2attr2diff = mapAttribute2Channel(\r\n        data,\r\n        func,\r\n        \"links\",\r\n        link2element,\r\n        linkElement2label\r\n    )\r\n\r\n    // Step3: Generate Descriptions about Visual Encodings\r\n    let descriptions = []\r\n    const configs = [\r\n        {\r\n            entityType: \"node\",\r\n            entity2element: node2element,\r\n            element2label: nodeElement2label,\r\n            label2attr2diff: nodeLabel2attr2diff,\r\n        },\r\n        {\r\n            entityType: \"link\",\r\n            entity2element: link2element,\r\n            element2label: linkElement2label,\r\n            label2attr2diff: linkLabel2attr2diff,\r\n        },\r\n    ]\r\n    configs.forEach(\r\n        ({ entityType, entity2element, element2label, label2attr2diff }) => {\r\n            // Step3.1: Generate Constituents, e.g. A node can consist of 4 elements\r\n            // const numberOfElementsEachEntity = entity2element[0].size\r\n            let numberOfLabels = Object.keys(label2attr2diff).length\r\n            // find related elements: all elements of nodes/links are related\r\n            let relatedElements = []\r\n            let relatedElementsIdx = []\r\n            entity2element.forEach((elementSet) => {\r\n                if (elementSet) {\r\n                    elementSet.forEach((elementIndex) => {\r\n                        relatedElementsIdx.push(elementIndex)\r\n                        relatedElements.push(\r\n                            nldComponents.basicElementArray[elementIndex]\r\n                                .element\r\n                        )\r\n                    })\r\n                }\r\n            })\r\n\r\n            let descrpitionSentence = {\r\n                template: DESCRIPTION_TEMPLATE.constituent(\r\n                    entityType,\r\n                    numberOfLabels\r\n                ),\r\n                parameters: [\r\n                    {\r\n                        type: PARAMETER_TYPE.entity,\r\n                        value: entityType,\r\n                    },\r\n                    {\r\n                        type: PARAMETER_TYPE.value,\r\n                        value: numberOfLabels,\r\n                    },\r\n                ],\r\n                elements: relatedElements,\r\n                elementsIdx: relatedElementsIdx,\r\n                switch: true,\r\n                children: [],\r\n            }\r\n\r\n            descriptions.push(descrpitionSentence)\r\n\r\n            // Step3.2: Vertical Grouping\r\n            const classes = {}\r\n            const label2class = {}\r\n            for (let label in label2attr2diff) {\r\n                const attr2diff = label2attr2diff[label]\r\n                const className = JSON.stringify(attr2diff)\r\n                classes[className] = classes[className] ?? new Set()\r\n                classes[className].add(label)\r\n                label2class[label] = className\r\n            }\r\n\r\n            // Step3.3: Generate Encoding Descriptions for each Category\r\n            let i = 1\r\n            for (let label in label2attr2diff) {\r\n                const relatedElementsIdx = element2label\r\n                    .map((l, eleIndex) => {\r\n                        // eslint-disable-next-line eqeqeq\r\n                        if (l == label) {\r\n                            return eleIndex\r\n                        } else {\r\n                            return undefined\r\n                        }\r\n                    })\r\n                    .filter((_) => _ !== undefined)\r\n                const relatedElements = element2label\r\n                    .map((l, eleIndex) => {\r\n                        // eslint-disable-next-line eqeqeq\r\n                        if (l == label) {\r\n                            return nldComponents.basicElementArray[eleIndex]\r\n                                .element\r\n                        } else {\r\n                            return undefined\r\n                        }\r\n                    })\r\n                    .filter((_) => _)\r\n\r\n                const attr2diff = label2attr2diff[label]\r\n                let tagNames = Array.from(\r\n                    new Set(\r\n                        element2label\r\n                            .map((l, eleIndex) => {\r\n                                // eslint-disable-next-line eqeqeq\r\n                                if (l == label) {\r\n                                    return nldComponents.basicElementArray[\r\n                                        eleIndex\r\n                                    ].tagName\r\n                                } else {\r\n                                    return undefined\r\n                                }\r\n                            })\r\n                            .filter((_) => _)\r\n                    )\r\n                ).sort()\r\n\r\n                if (tagNames.length === 1) {\r\n                    const elementDescription = {\r\n                        template: DESCRIPTION_TEMPLATE.onePrimitive(\r\n                            numberOfLabels\r\n                        ), // e.g., The first element is a rect\r\n                        parameters: [\r\n                            number2ordinal(i),\r\n                            {\r\n                                type: PARAMETER_TYPE.element,\r\n                                value: `&lt;${tagNames[0]}&gt;`,\r\n                            },\r\n                        ],\r\n                        elements: relatedElements,\r\n                        elementsIdx: relatedElementsIdx,\r\n                        switch: true,\r\n                        children: [],\r\n                    }\r\n                    descrpitionSentence.children.push(elementDescription)\r\n\r\n                    elementDescription.children = genDescsForAttr2Diff(\r\n                        Object.entries(attr2diff),\r\n                        relatedElements,\r\n                        relatedElementsIdx\r\n                    )\r\n                } else if (tagNames.length > 1) {\r\n                    const tagNameChoiceDescriptions = {\r\n                        template: DESCRIPTION_TEMPLATE.multiPrimitive(\r\n                            numberOfLabels\r\n                        ),\r\n                        parameters: [\r\n                            number2ordinal(i),\r\n                            {\r\n                                type: PARAMETER_TYPE.element,\r\n                                value: tagNames.map(\r\n                                    (tagName) => `&lt;${tagName}&gt;`\r\n                                ),\r\n                            },\r\n                        ],\r\n                        elements: relatedElements,\r\n                        elementsIdx: relatedElementsIdx,\r\n                        switch: true,\r\n                        children: [],\r\n                    }\r\n                    descrpitionSentence.children.push(tagNameChoiceDescriptions)\r\n\r\n                    const tagName2attr2val = {}\r\n                    const attr2diffEntriesWithCommonStyle = Object.entries(\r\n                        attr2diff\r\n                    ).reduce((result, [attrName, diff]) => {\r\n                        if (diff.tagName) {\r\n                            if (diff.tagName.typeX === \"categorical\") {\r\n                                for (let tagName in diff.tagName\r\n                                    .attributeMapping) {\r\n                                    tagName2attr2val[\r\n                                        tagName\r\n                                    ] = tagName2attr2val[tagName] ?? {\r\n                                        attrName,\r\n                                    }\r\n                                    tagName2attr2val[tagName].attrVal =\r\n                                        tagName2attr2val[tagName].attrVal ??\r\n                                        new Set()\r\n                                    diff.tagName.attributeMapping[\r\n                                        tagName\r\n                                    ].forEach((val) => {\r\n                                        tagName2attr2val[tagName].attrVal.add(\r\n                                            val\r\n                                        )\r\n                                    })\r\n                                }\r\n                            } else {\r\n                                for (let tagName in diff.tagName\r\n                                    .attributeMapping) {\r\n                                    tagName2attr2val[\r\n                                        tagName\r\n                                    ] = tagName2attr2val[tagName] ?? {\r\n                                        attrName,\r\n                                    }\r\n                                    tagName2attr2val[\r\n                                        tagName\r\n                                    ].attrVal = tagName2attr2val[tagName]\r\n                                        .attrVal ?? {\r\n                                        max: -Infinity,\r\n                                        min: Infinity,\r\n                                    }\r\n                                    tagName2attr2val[\r\n                                        tagName\r\n                                    ].attrVal.max = Math.max(\r\n                                        tagName2attr2val[tagName].attrVal.max,\r\n                                        Number(\r\n                                            diff.tagName.attributeMapping.max\r\n                                        )\r\n                                    )\r\n                                    tagName2attr2val[\r\n                                        tagName\r\n                                    ].attrVal.min = Math.min(\r\n                                        tagName2attr2val[tagName].attrVal.min,\r\n                                        Number(\r\n                                            diff.tagName.attributeMapping.min\r\n                                        )\r\n                                    )\r\n                                }\r\n                            }\r\n                        }\r\n                        const commonStyleDiff = {}\r\n                        if (diff.style) {\r\n                            for (let channel in diff.style) {\r\n                                if (\r\n                                    COMMON_STYLE_CHANNELS.has(channel) &&\r\n                                    diff.style[channel]\r\n                                ) {\r\n                                    commonStyleDiff.style =\r\n                                        commonStyleDiff.style ?? {}\r\n                                    commonStyleDiff.style[channel] =\r\n                                        diff.style[channel]\r\n                                }\r\n                            }\r\n                        }\r\n                        if (Object.keys(commonStyleDiff).length) {\r\n                            result.push([attrName, commonStyleDiff])\r\n                        }\r\n                        // if (!diff.tagName) {\r\n                        //     if (diff.style) {\r\n                        //         const _diff = {}\r\n                        //         for (let channel in diff.style) {\r\n                        //             if (COMMON_STYLE_CHANNELS.has(channel)) {\r\n                        //                 _diff.style = _diff.style ?? {}\r\n                        //                 _diff.style[channel] = true\r\n                        //             }\r\n                        //         }\r\n                        //         if (_diff.style) {\r\n                        //             result.push([attrName, _diff])\r\n                        //         }\r\n                        //     }\r\n                        // } else {\r\n                        //     result.push([attrName, { tagName: true }])\r\n                        // }\r\n                        return result\r\n                    }, [])\r\n\r\n                    // attr2diffEntriesWithCommonStyle.forEach(\r\n                    //     ([attrName, diff]) => {\r\n                    //         const channels = []\r\n                    //         if (diff.tagName) {\r\n                    //             channels.push(\"tagName\")\r\n                    //         }\r\n                    //         if (diff.style) {\r\n                    //             Object.entries(diff.style).forEach(\r\n                    //                 ([channel, bool]) => {\r\n                    //                     if (bool) {\r\n                    //                         channels.push(\r\n                    //                             `\"${channel.split(\".\")[0]}\"`\r\n                    //                         )\r\n                    //                     }\r\n                    //                 }\r\n                    //             )\r\n                    //         }\r\n                    //         descrpitionSentence.children.push({\r\n                    //             template: DESCRIPTION_TEMPLATE.channels2attribute(),\r\n                    //             parameters: [channels, attrName],\r\n                    //             elements: relatedElements,\r\n                    //             switch: false,\r\n                    //             children: [],\r\n                    //         })\r\n                    //     }\r\n                    // )\r\n                    genDescsForAttr2Diff(\r\n                        attr2diffEntriesWithCommonStyle,\r\n                        relatedElements,\r\n                        relatedElementsIdx\r\n                    ).forEach((desc) => {\r\n                        descrpitionSentence.children.push(desc)\r\n                    })\r\n\r\n                    tagNames.forEach((tagName) => {\r\n                        const thisTagNameRelatedElements = relatedElements.filter(\r\n                            (element) => element.tagName === tagName\r\n                        )\r\n                        const thisTagNameRelatedElementsIdx = relatedElementsIdx.filter(\r\n                            (idx, i) => relatedElements[i].tagName === tagName\r\n                        )\r\n                        // TODO: tagName2attr2val\r\n                        // multiPrimitiveTagName: (attrName, attrVals, tagName) => {}\r\n                        const valueArrayOfAttributesControlsThisTag =\r\n                            \"max\" in tagName2attr2val[tagName].attrVal &&\r\n                            \"min\" in tagName2attr2val[tagName].attrVal\r\n                                ? [\r\n                                      tagName2attr2val[tagName].attrVal.min,\r\n                                      tagName2attr2val[tagName].attrVal.max,\r\n                                  ]\r\n                                : Array.from(tagName2attr2val[tagName].attrVal)\r\n                        const thisTagNameDescriptions = {\r\n                            template: DESCRIPTION_TEMPLATE.multiPrimitiveTagName(\r\n                                tagName2attr2val[tagName].attrVal\r\n                            ),\r\n                            parameters: [\r\n                                {\r\n                                    // tagName\r\n                                    type: PARAMETER_TYPE.element,\r\n                                    value: `&lt;${tagName}&gt;`,\r\n                                },\r\n                                {\r\n                                    // attrName\r\n                                    type: PARAMETER_TYPE.attribute,\r\n                                    value: tagName2attr2val[tagName].attrName,\r\n                                },\r\n                                ...valueArrayOfAttributesControlsThisTag.map(\r\n                                    (value) => ({\r\n                                        // attrVal\r\n                                        type: PARAMETER_TYPE.value,\r\n                                        value,\r\n                                    })\r\n                                ),\r\n                            ],\r\n                            elements: thisTagNameRelatedElements,\r\n                            elementsIdx: thisTagNameRelatedElementsIdx,\r\n                            switch: true,\r\n                            children: [],\r\n                        }\r\n\r\n                        tagNameChoiceDescriptions.children.push(\r\n                            thisTagNameDescriptions\r\n                        )\r\n\r\n                        const attr2diffEntriesWithThisTag = Object.entries(\r\n                            attr2diff\r\n                        ).reduce((result, [attrName, diff]) => {\r\n                            const thisTagDiff = {}\r\n                            if (diff.style) {\r\n                                for (let channel in diff.style) {\r\n                                    if (channel.split(\".\")[1] === tagName) {\r\n                                        channel = channel.split(\".\")[0]\r\n                                    }\r\n                                    if (\r\n                                        BASIC_SVG_ELEMENTS.get(tagName).has(\r\n                                            channel\r\n                                        ) &&\r\n                                        !COMMON_STYLE_CHANNELS.has(channel)\r\n                                    ) {\r\n                                        thisTagDiff.style =\r\n                                            thisTagDiff.style ?? {}\r\n                                        thisTagDiff.style[channel] =\r\n                                            diff.style[channel]\r\n                                    }\r\n                                }\r\n                            }\r\n                            if (Object.keys(thisTagDiff).length) {\r\n                                result.push([attrName, thisTagDiff])\r\n                            }\r\n                            // if (!diff.tagName) {\r\n                            //     if (diff.style) {\r\n                            //         const _diff = {}\r\n                            //         for (let channel in diff.style) {\r\n                            //             if (channel.split(\".\")[1] === tagName) {\r\n                            //                 channel = channel.split(\".\")[0]\r\n                            //             }\r\n                            //             if (\r\n                            //                 BASIC_SVG_ELEMENTS.get(tagName).has(\r\n                            //                     channel\r\n                            //                 ) &&\r\n                            //                 !COMMON_STYLE_CHANNELS.has(channel)\r\n                            //             ) {\r\n                            //                 _diff.style = _diff.style ?? {}\r\n                            //                 _diff.style[channel] = true\r\n                            //             }\r\n                            //             // if (\r\n                            //             //     [\r\n                            //             //         COMMON_POSITION_CHANNELS.get(\r\n                            //             //             tagName\r\n                            //             //         ),\r\n                            //             //         BASIC_SVG_ELEMENTS.get(tagName),\r\n                            //             //     ].some(\r\n                            //             //         (channels) =>\r\n                            //             //             channels.has(channel) ||\r\n                            //             //             (channel.split(\".\")[1] ==\r\n                            //             //                 tagName &&\r\n                            //             //                 channels.has(\r\n                            //             //                     channel.split(\r\n                            //             //                         \".\"\r\n                            //             //                     )[0]\r\n                            //             //                 ))\r\n                            //             //     )\r\n                            //             // ) {\r\n                            //             //     _diff.style = _diff.style ?? {}\r\n                            //             //     _diff.style[channel] = true\r\n                            //             // }\r\n                            //         }\r\n                            //         if (_diff.style) {\r\n                            //             result.push([attrName, _diff])\r\n                            //         }\r\n                            //     }\r\n                            // }\r\n                            return result\r\n                        }, [])\r\n\r\n                        thisTagNameDescriptions.children = genDescsForAttr2Diff(\r\n                            attr2diffEntriesWithThisTag,\r\n                            thisTagNameRelatedElements,\r\n                            thisTagNameRelatedElementsIdx\r\n                        )\r\n                        // attr2diffEntriesWithThisTag.forEach(\r\n                        //     ([attrName, diff], j) => {\r\n                        //         const channels = []\r\n                        //         if (diff.style) {\r\n                        //             Object.entries(diff.style).forEach(\r\n                        //                 ([channel, bool]) => {\r\n                        //                     if (bool) {\r\n                        //                         channels.push(\r\n                        //                             `\"${channel.split(\".\")[0]}\"`\r\n                        //                         )\r\n                        //                     }\r\n                        //                 }\r\n                        //             )\r\n                        //         }\r\n                        //         thisTagNameDescriptions.children.push({\r\n                        //             template: DESCRIPTION_TEMPLATE.channels2attribute(\r\n                        //                 /*isfirstWordUpper*/ j !== 0\r\n                        //             ),\r\n                        //             parameters: [channels, attrName],\r\n                        //             elements: thisTagNameRelatedElements,\r\n                        //             switch: false,\r\n                        //             children: [],\r\n                        //         })\r\n                        //     }\r\n                        // )\r\n                    })\r\n                }\r\n\r\n                i++\r\n            }\r\n        }\r\n    )\r\n\r\n    function genDescsForAttr2Diff(\r\n        attr2diffEntries,\r\n        relatedElements,\r\n        relatedElementsIdx\r\n    ) {\r\n        const result = []\r\n        attr2diffEntries.forEach(([attrName, diff]) => {\r\n            const channels = []\r\n            if (diff.tagName) {\r\n                channels.push(\"tagName\")\r\n            }\r\n            if (diff.style) {\r\n                Object.entries(diff.style).forEach(([channel, bool]) => {\r\n                    if (bool) {\r\n                        channels.push(`${channel.split(\".\")[0]}`)\r\n                    }\r\n                })\r\n            }\r\n\r\n            // Generate correlations\r\n            channels.forEach((channel) => {\r\n                let relation\r\n                if (channel === \"tagName\") {\r\n                    relation = diff.tagName\r\n                } else {\r\n                    relation = diff.style[channel]\r\n                }\r\n\r\n                let encodingDetailDescription = {\r\n                    template: DESCRIPTION_TEMPLATE.channels2attribute(), // Its fill encodes the attribute xxx.\r\n                    parameters: [\r\n                        {\r\n                            type: PARAMETER_TYPE.channel,\r\n                            value: [channel],\r\n                        },\r\n                        {\r\n                            type: PARAMETER_TYPE.attribute,\r\n                            value: attrName,\r\n                        },\r\n                    ],\r\n                    elements: relatedElements,\r\n                    elementsIdx: relatedElementsIdx,\r\n                    switch: false,\r\n                    children: [],\r\n                }\r\n                if (relation && relation !== true) {\r\n                    // For numerical to numerical: describe the kendall test\r\n                    if (\r\n                        relation.typeX === \"numerical\" &&\r\n                        relation.typeY === \"numerical\" &&\r\n                        // relation.kendall.pvalue <= 0.05\r\n                        Math.abs(relation.correlation) > threshold\r\n                    ) {\r\n                        // more...more...\r\n                        encodingDetailDescription.children.push({\r\n                            template: DESCRIPTION_TEMPLATE.correlationN2N(\r\n                                // relation.pearson.correlation > 0\r\n                                relation.correlation > 0\r\n                            ), // Its fill encodes the attribute xxx.\r\n                            parameters: [\r\n                                {\r\n                                    type: PARAMETER_TYPE.channel,\r\n                                    value: channel,\r\n                                },\r\n                                {\r\n                                    type: PARAMETER_TYPE.attribute,\r\n                                    value: attrName,\r\n                                },\r\n                            ],\r\n                            elements: relatedElements,\r\n                            elementsIdx: relatedElementsIdx,\r\n                        })\r\n                    } else if (\r\n                        relation.typeX === \"numerical\" &&\r\n                        relation.typeY === \"categorical\"\r\n                    ) {\r\n                        Object.entries(relation.attributeMapping).forEach(\r\n                            ([chanVal, attrVals]) => {\r\n                                encodingDetailDescription.children.push({\r\n                                    template:\r\n                                        DESCRIPTION_TEMPLATE.correlationN2C, // `When the value of the attribute ${attrName} is from ... to ..., its ${chanName} turns to ${chanVal}.`\r\n                                    parameters: [\r\n                                        {\r\n                                            type: PARAMETER_TYPE.channel,\r\n                                            value: channel,\r\n                                        },\r\n                                        {\r\n                                            type: PARAMETER_TYPE.attribute,\r\n                                            value: attrName,\r\n                                        },\r\n                                        {\r\n                                            type: PARAMETER_TYPE.value,\r\n                                            value: chanVal,\r\n                                        },\r\n                                        {\r\n                                            type: PARAMETER_TYPE.value,\r\n                                            value: attrVals.min,\r\n                                        },\r\n                                        {\r\n                                            type: PARAMETER_TYPE.value,\r\n                                            value: attrVals.max,\r\n                                        },\r\n                                    ],\r\n                                    elements: relatedElements.filter(\r\n                                        (element) => {\r\n                                            if (channel !== \"tagName\") {\r\n                                                return (\r\n                                                    element.attributes[channel]\r\n                                                        .value == chanVal\r\n                                                )\r\n                                            } else {\r\n                                                return (\r\n                                                    element.tagName == chanVal\r\n                                                )\r\n                                            }\r\n                                        }\r\n                                    ),\r\n                                    elementsIdx: relatedElementsIdx.filter(\r\n                                        (idx, i) => {\r\n                                            if (channel !== \"tagName\") {\r\n                                                return (\r\n                                                    relatedElements[i]\r\n                                                        .attributes[channel]\r\n                                                        .value == chanVal\r\n                                                )\r\n                                            } else {\r\n                                                return (\r\n                                                    relatedElements[i]\r\n                                                        .tagName == chanVal\r\n                                                )\r\n                                            }\r\n                                        }\r\n                                    ),\r\n                                })\r\n                            }\r\n                        )\r\n                    } else if (\r\n                        relation.typeX === \"categorical\" &&\r\n                        relation.typeY === \"categorical\" &&\r\n                        relation.attributeMapping\r\n                    ) {\r\n                        Object.entries(relation.attributeMapping).forEach(\r\n                            ([chanVal, attrVals]) => {\r\n                                encodingDetailDescription.children.push({\r\n                                    template:\r\n                                        DESCRIPTION_TEMPLATE.correlationC2C, // `When the value of the attribute ${attrName} is ${textualizeStringArray( attrVals, \"or\" )}, its ${chanName} turns to ${chanVal}.`\r\n                                    parameters: [\r\n                                        {\r\n                                            type: PARAMETER_TYPE.channel,\r\n                                            value: channel,\r\n                                        },\r\n                                        {\r\n                                            type: PARAMETER_TYPE.attribute,\r\n                                            value: attrName,\r\n                                        },\r\n                                        {\r\n                                            type: PARAMETER_TYPE.value,\r\n                                            value: chanVal,\r\n                                        },\r\n                                        {\r\n                                            type: PARAMETER_TYPE.value,\r\n                                            value: attrVals,\r\n                                        },\r\n                                    ],\r\n                                    elements: relatedElements.filter(\r\n                                        (element) => {\r\n                                            if (channel !== \"tagName\") {\r\n                                                return (\r\n                                                    element.attributes[channel]\r\n                                                        .value == chanVal\r\n                                                )\r\n                                            } else {\r\n                                                return (\r\n                                                    element.tagName == chanVal\r\n                                                )\r\n                                            }\r\n                                        }\r\n                                    ),\r\n                                    elementsIdx: relatedElementsIdx.filter(\r\n                                        (idx, i) => {\r\n                                            if (channel !== \"tagName\") {\r\n                                                return (\r\n                                                    relatedElements[i]\r\n                                                        .attributes[channel]\r\n                                                        .value == chanVal\r\n                                                )\r\n                                            } else {\r\n                                                return (\r\n                                                    relatedElements[i]\r\n                                                        .tagName == chanVal\r\n                                                )\r\n                                            }\r\n                                        }\r\n                                    ),\r\n                                })\r\n                            }\r\n                        )\r\n                    }\r\n                }\r\n\r\n                if (encodingDetailDescription.children.length == 0) {\r\n                    encodingDetailDescription.children.push({\r\n                        template: DESCRIPTION_TEMPLATE.correlationUndefined, // `However, the correlation between ${channel} and ${attrName} are not determined yet.`\r\n                        parameters: [\r\n                            {\r\n                                type: PARAMETER_TYPE.channel,\r\n                                value: channel,\r\n                            },\r\n                            {\r\n                                type: PARAMETER_TYPE.attribute,\r\n                                value: attrName,\r\n                            },\r\n                        ],\r\n                        elements: relatedElements,\r\n                        elementsIdx: relatedElementsIdx,\r\n                    })\r\n                }\r\n\r\n                result.push(encodingDetailDescription)\r\n            })\r\n            // For numerical to categorical:\r\n            // For categorical to categorical:\r\n        })\r\n        return result\r\n    }\r\n\r\n    // Step4: Detect Layout Meanings\r\n    // Step4.1: Generate x/y positions for each node\r\n    const nodeAttrs = Array.from(\r\n        NoLinDiagram.getAttributesOf(data).nodes.entries()\r\n    ) //! should before position computing\r\n\r\n    document.body.appendChild(svg)\r\n    const svgBBox = svg.getBoundingClientRect()\r\n    node2element.forEach((elementIndexSet, entityIndex) => {\r\n        const elements = Array.from(elementIndexSet).map(\r\n            (elementIndex) =>\r\n                nldComponents.basicElementArray[elementIndex].element\r\n        )\r\n\r\n        const min = {\r\n            x: Infinity,\r\n            y: Infinity,\r\n        }\r\n        const max = {\r\n            x: -Infinity,\r\n            y: -Infinity,\r\n        }\r\n\r\n        elements.forEach((element) => {\r\n            const box = element.getBoundingClientRect()\r\n            const x = box.x - svgBBox.x\r\n            const y = box.y - svgBBox.y\r\n            min.x = Math.min(min.x, x + box.width / 2)\r\n            max.x = Math.max(max.x, x + box.width / 2)\r\n\r\n            min.y = Math.min(min.y, y + box.height / 2)\r\n            max.y = Math.max(max.y, y + box.height / 2)\r\n        })\r\n\r\n        data.nodes[entityIndex].x = (max.x + min.x) / 2\r\n        data.nodes[entityIndex].y = (max.y + min.y) / 2\r\n    })\r\n    document.body.removeChild(svg)\r\n    const endTime = performance.now()\r\n    console.log(\"Computing time:\", endTime - beginTime, \"ms\")\r\n\r\n    const allElements = nldComponents.basicElementArray.map((_) => _.element)\r\n    const allElementsIdx = new Array(nldComponents.basicElementArray.length)\r\n        .fill()\r\n        .map((_, i) => i)\r\n    const xs = data.nodes.map((n) => n.x)\r\n    const ys = data.nodes.map((n) => n.y)\r\n    const xAttrs = []\r\n    const yAttrs = []\r\n\r\n    for (let i = 0; i < nodeAttrs.length; i++) {\r\n        const attrName = nodeAttrs[i][0]\r\n        // const CONNECTOR = \"@\"\r\n        let attrVals = nodeAttrs[i][1].range\r\n        // if (attrName.indexOf(CONNECTOR) > 0) {\r\n        //     attrVals = data.nodes.map(\r\n        //         (n) =>\r\n        //             n[attrName.split(CONNECTOR)[0]][\r\n        //                 attrName.split(CONNECTOR)[1]\r\n        //             ]\r\n        //     )\r\n        // } else {\r\n        //     attrVals = data.nodes.map((n) => n[attrName])\r\n        // }\r\n\r\n        // console.log(i, nodeAttrs.length, attrName, attrVals)\r\n        // const xRelation = await attributeRelation(xs, attrVals)\r\n        const xRelation = attributeRelation(xs, attrVals)\r\n        // if (xRelation?.pearson?.pvalue <= 0.05) {\r\n        if (Math.abs(xRelation?.correlation) > threshold) {\r\n            // console.log(attrName, \"x\")\r\n            xAttrs.push({\r\n                name: attrName,\r\n                // type: xRelation?.pearson?.correlation > 0,\r\n                type: xRelation?.correlation > 0,\r\n            })\r\n        }\r\n        // const yRelation = await attributeRelation(ys, attrVals)\r\n        const yRelation = attributeRelation(ys, attrVals)\r\n        // if (yRelation?.pearson?.pvalue <= 0.05) {\r\n        if (Math.abs(yRelation?.correlation) > threshold) {\r\n            // console.log(attrName, \"y\")\r\n            yAttrs.push({\r\n                name: attrName,\r\n                // type: yRelation?.pearson?.correlation > 0,\r\n                type: yRelation?.correlation > 0,\r\n            })\r\n        }\r\n    }\r\n\r\n    // console.log(xAttrs, yAttrs)\r\n    const layoutDescriptions = []\r\n    if (xAttrs.length > 0 && yAttrs.length > 0) {\r\n        // attribute-layout\r\n        ;[\r\n            { axis: \"x\", attrs: xAttrs },\r\n            { axis: \"y\", attrs: yAttrs },\r\n        ].forEach(({ axis, attrs }) => {\r\n            layoutDescriptions.push({\r\n                template: (axis, attrNames) => {\r\n                    return `The ${axis}-coordinates encodes ${\r\n                        attrNames.length > 1 ? \"\" : \"the\"\r\n                    } attribute${\r\n                        attrNames.length > 1 ? \"\" : \"s\"\r\n                    } ${textualizeStringArray(attrNames)}`\r\n                },\r\n                parameters: [\r\n                    {\r\n                        type: PARAMETER_TYPE.channel,\r\n                        value: axis,\r\n                    },\r\n                    {\r\n                        type: PARAMETER_TYPE.attribute,\r\n                        value: attrs.map((_) => _.name),\r\n                    },\r\n                ],\r\n                elements: [],\r\n                elementsIdx: [],\r\n                children: attrs.map((attr) => ({\r\n                    template: (axis, attrName) => {\r\n                        return `The greater the ${attrName} is, the ${\r\n                            attr.type ? \"greater📈\" : \"smaller📉\"\r\n                        } the ${axis}-coordinate is.`\r\n                    },\r\n                    parameters: [\r\n                        {\r\n                            type: PARAMETER_TYPE.channel,\r\n                            value: axis,\r\n                        },\r\n                        {\r\n                            type: PARAMETER_TYPE.attribute,\r\n                            value: attr.name,\r\n                        },\r\n                    ],\r\n                    elements: allElements,\r\n                    elementsIdx: allElementsIdx,\r\n                })),\r\n            })\r\n        })\r\n    }\r\n\r\n    // // topology-layout\r\n    // const correlation = await fetch(BACKEND_URL + \"layout-correlation\", {\r\n    //     method: \"POST\",\r\n    //     headers: {\r\n    //         \"Content-Type\": \"application/json\",\r\n    //     },\r\n    //     body: JSON.stringify(data),\r\n    // }).then((res) => res.json())\r\n    const correlation = layoutRelation(data)\r\n\r\n    if (Math.abs(correlation) > 0.3) {\r\n        layoutDescriptions.push({\r\n            template: () => {\r\n                return `The layout is a topology-based layout, which means the farther the topology distance between two nodes, the farther the distance between them.`\r\n            },\r\n            parameters: [],\r\n            elements: allElements,\r\n            elementsIdx: allElementsIdx,\r\n        })\r\n    } else if (xAttrs.length === 0 && yAttrs.length === 0) {\r\n        layoutDescriptions.push({\r\n            template: () => {\r\n                return `The layout is neither an attribute-based layout nor a topology-based layout.`\r\n            },\r\n            parameters: [],\r\n            elements: allElements,\r\n            elementsIdx: allElementsIdx,\r\n        })\r\n    }\r\n\r\n    // console.log(layoutDescriptions)\r\n\r\n    return {\r\n        svg,\r\n        allElements,\r\n        allElementsIdx,\r\n        descriptions,\r\n        layoutDescriptions,\r\n    }\r\n}\r\n","import { extractAttributes } from \"./utils.js\";\r\nimport {\r\n    generateLinkingConditions,\r\n    unionCondition,\r\n    excludeCondition,\r\n    accumulateCondition,\r\n} from './conditionOperations.js'\r\n\r\n\r\nfunction linkCondition(data, threshold = 0.8) {\r\n    const attrs = extractAttributes(data)\r\n\r\n    const nodeMap = {}\r\n    data.nodes.forEach(n => {\r\n        nodeMap[n.id] = n\r\n    })\r\n\r\n    // linkset\r\n\r\n    const linkSet = new Set()\r\n\r\n    data.links.forEach(l => {\r\n        linkSet.add(`${l.source}+${l.target}`)\r\n        linkSet.add(`${l.target}+${l.source}`)\r\n    })\r\n\r\n    // 没有边的，求并集\r\n\r\n    let excludeUnionResult = {}\r\n\r\n    Object.keys(nodeMap).forEach(source => {\r\n        Object.keys(nodeMap).forEach(target => {\r\n            const term = `${source}+${target}`\r\n            if (source === target || linkSet.has(term)) {\r\n                return\r\n            }\r\n\r\n            const conditions = generateLinkingConditions(nodeMap[source], nodeMap[target], attrs)\r\n            excludeUnionResult = unionCondition(excludeUnionResult, conditions)\r\n        })\r\n    })\r\n\r\n    /*\r\n    console.log('invalid condition union:')\r\n    console.log(excludeUnionResult)\r\n    */\r\n\r\n    // 有边的，逐个累计\r\n\r\n    let result = null\r\n\r\n    data.links.forEach(l => {\r\n        const sourceNode = nodeMap[l.source]\r\n        const targetNode = nodeMap[l.target]\r\n        const conditions = generateLinkingConditions(sourceNode, targetNode, attrs)\r\n        if (!result) {\r\n            result = excludeCondition(conditions, excludeUnionResult)\r\n        } else {\r\n            result = accumulateCondition(result, excludeCondition(conditions, excludeUnionResult))\r\n        }\r\n    })\r\n\r\n    /*\r\n    console.log('-------------------------------')\r\n    console.log('valid condition:')\r\n    console.log(result)\r\n    */\r\n\r\n\r\n    // 筛选出足够有说服力的\r\n\r\n    const linkCnt = data.links.length\r\n\r\n    const possibleConditions = []\r\n\r\n    for (const attr in result) {\r\n        for (const relation in result[attr]) {\r\n            if (typeof result[attr][relation] === 'number') {\r\n                // similar 特判\r\n                // TODO: 暂不考虑similar的结果\r\n                continue;\r\n            } else {\r\n                for (const value in result[attr][relation]) {\r\n                    if (result[attr][relation][value] > linkCnt * threshold) {\r\n                        possibleConditions.push({\r\n                            attribute: attr,\r\n                            relation: relation,\r\n                            value: value,\r\n                            frequency: result[attr][relation][value],\r\n                            coverage: result[attr][relation][value] / linkCnt\r\n                        })\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    /*\r\n    console.log('-------------------------------')\r\n    console.log('final possible conditions:')\r\n    console.log(possibleConditions) \r\n    */\r\n\r\n    return possibleConditions\r\n\r\n\r\n    // debug\r\n\r\n    // const link1 = data.links[1]\r\n    // const cond1 = generateLinkingConditions(nodeMap[link1.source], nodeMap[link1.target], attrs)\r\n    // console.log(cond1)\r\n}\r\n\r\nexport {\r\n    linkCondition\r\n}","import { Card } from \"antd\";\r\nimport { useHistory } from \"react-router\";\r\nimport './GallaryItem.css'\r\n\r\nexport function GallaryItem({ title, image, children, route }) {\r\n    const history = useHistory()\r\n    return (\r\n        <Card\r\n            hoverable\r\n            style={{\r\n                width: 270,\r\n                margin: 10,\r\n                borderRadius: 7,\r\n            }}\r\n            cover={<img alt={title} src={image} style={{\r\n                borderBottom: '1px #ddd solid',\r\n                width: 270,\r\n                height: 270,\r\n                objectFit: 'contain',\r\n                borderRadius: '7px 7px 0 0',\r\n            }} />}\r\n            onClick={() => { history.push(route) }}\r\n        >\r\n            <Card.Meta style={{\r\n                whiteSpace: 'normal',\r\n                height: 60,\r\n            }} title={title} />\r\n            <div\r\n                style={{\r\n                    height: 75,\r\n                    lineHeight: '25px',\r\n                    textOverflow: 'ellipsis',\r\n                    overflow: \"hidden\"\r\n                }}\r\n            >{children}</div>\r\n        </Card>\r\n    )\r\n}","import { GallaryItem } from \"../components/GallaryItem\"\r\nimport { TitleBar } from \"../components/TitleBar\"\r\nimport \"./HomePage.css\"\r\n\r\nfunction HomePage() {\r\n    return (\r\n        <div\r\n            style={{\r\n                backgroundColor: \"#f5f5f5\",\r\n                display: \"flex\",\r\n                alignItems: \"center\",\r\n                flexDirection: \"column\",\r\n                overflow: \"initial\",\r\n            }}\r\n        >\r\n            <TitleBar />\r\n            <div\r\n                style={{\r\n                    width: \"80%\",\r\n                    maxWidth: 1200,\r\n                    marginTop: 80,\r\n                    marginBottom: 80,\r\n                }}\r\n            >\r\n                <div\r\n                    style={{\r\n                        display: \"flex\",\r\n                        flexDirection: \"column\",\r\n                        padding: \"0 10px 0 10px\",\r\n                    }}\r\n                >\r\n                    <h1\r\n                        style={{\r\n                            fontFamily: \"Times\",\r\n                            fontSize: \"30px\",\r\n                            fontWeight: \"600\",\r\n                            borderBottom: \"2px #000 solid\",\r\n                        }}\r\n                    >\r\n                        GraphDescriptor: An Automatic Description Generator\r\n                        for Node-Link Diagrams\r\n                    </h1>\r\n                    {/* <img\r\n                        alt=\"main\"\r\n                        src=\"main.jpg\"\r\n                        style={{\r\n                            width: \"60%\",\r\n                            margin: \"20px auto 20px auto\",\r\n                        }}\r\n                    /> */}\r\n                    <p\r\n                        style={{\r\n                            fontFamily: \"Times\",\r\n                            fontSize: \"1.2em\",\r\n                        }}\r\n                    >\r\n                        Node-link diagrams can effectively reveal relations and attributes of entities. However, non-professional users may have a low ability to read visual forms or be unskilled in exploring cluttered diagrams. This paper presents GraphDescriptor, an automatic description generation approach for node-link diagrams. The key idea is to extract relevant information from both the underlying data and the source code of visualization and generate textual descriptions with a template-based scheme. We design and develop an interactive interface for interactive specification, exploration, and modulation of descriptions. Diverse examples and a user study verify the utility and effectiveness of GraphDescriptor.\r\n                    </p>\r\n                </div>\r\n                <div\r\n                    style={{\r\n                        fontFamily: \"Times\",\r\n                        fontSize: 30,\r\n                        fontWeight: 600,\r\n                        margin: \"0 10px 10px 10px\",\r\n                        height: 50,\r\n                        borderBottom: \"2px #000 solid\",\r\n                    }}\r\n                >\r\n                    Gallary\r\n                </div>\r\n                <div\r\n                    style={{\r\n                        display: \"flex\",\r\n                        flexWrap: \"wrap\",\r\n                        justifyContent: \"space-around\",\r\n                    }}\r\n                >\r\n                    <GallaryItem\r\n                        image={\"./data/imdb-movies-raw/imdb-movies.png\"}\r\n                        title={\"IMDb Dataset: Simple Nodes and Links\"}\r\n                        route={\"/imdb-movies\"}\r\n                    >\r\n                        Two nodes are connected if their attributes{\" \"}\r\n                        <span class=\"description-parameter\">genre</span> have\r\n                        common values. Each{\" \"}\r\n                        <span class=\"description-parameter\">node</span> consists\r\n                        of only <span class=\"description-parameter\">1</span>{\" \"}\r\n                        element. It is a{\" \"}\r\n                        <span class=\"description-parameter\">\r\n                            &lt;circle&gt;\r\n                        </span>\r\n                        . Its \"<span class=\"description-parameter\">\"fill\"</span>\r\n                        \" encodes the attribute{\" \"}\r\n                        <span class=\"description-parameter\">\r\n                            date_published\r\n                        </span>\r\n                        . Its \"<span class=\"description-parameter\">\"cx\"</span>\"\r\n                        encodes the attribute{\" \"}\r\n                        <span class=\"description-parameter\">budget</span>. Its \"\r\n                        <span class=\"description-parameter\">\"cy\"</span>\" encodes\r\n                        the attribute{\" \"}\r\n                        <span class=\"description-parameter\">\r\n                            worlwide_gross_income\r\n                        </span>\r\n                        . Each <span class=\"description-parameter\">link</span>{\" \"}\r\n                        consists of only{\" \"}\r\n                        <span class=\"description-parameter\">1</span> element. It\r\n                        is a{\" \"}\r\n                        <span class=\"description-parameter\">&lt;line&gt;</span>.\r\n                        Its \"\r\n                        <span class=\"description-parameter\">\r\n                            \"stroke-width\"\r\n                        </span>\r\n                        \" encodes the attribute{\" \"}\r\n                        <span class=\"description-parameter\">common_genre</span>\r\n                    </GallaryItem>\r\n                    <GallaryItem\r\n                        image={\r\n                            \"./data/imdb-movies-shapes/imdb-movies-shapes.png\"\r\n                        }\r\n                        title={\"IMDb Dataset: Nodes with Different Shapes\"}\r\n                        route={\"/imdb-movies-shapes\"}\r\n                    >\r\n                        Two nodes are connected if their attributes{\" \"}\r\n                        <span class=\"description-parameter\">actors</span> have\r\n                        common values. Its \"tagName\" is varying among multiple\r\n                        shapes:{\" \"}\r\n                        <span class=\"description-parameter\">\r\n                            &lt;circle&gt;\r\n                        </span>{\" \"}\r\n                        and{\" \"}\r\n                        <span class=\"description-parameter\">&lt;rect&gt;</span>.\r\n                        When it turns to{\" \"}\r\n                        <span class=\"description-parameter \">\r\n                            &lt;circle&gt;\r\n                        </span>\r\n                        , its encodings are changed. Its{\" \"}\r\n                        <span class=\"description-parameter \">r</span> encodes\r\n                        the attribute{\" \"}\r\n                        <span class=\"description-parameter \">votes</span>.\r\n                    </GallaryItem>\r\n                    <GallaryItem\r\n                        image={\"./data/imdb-actors/imdb-actors.png\"}\r\n                        title={\"IMDb Dataset: Line Charts Embeded on Nodes\"}\r\n                        route={\"/imdb-actors\"}\r\n                    >\r\n                        Two nodes are connected if their attributes{\" \"}\r\n                        <span class=\"description-parameter\">movies</span> share\r\n                        an intersection. Each{\" \"}\r\n                        <span class=\"description-parameter\">node</span> consists\r\n                        of <span class=\"description-parameter\">5</span>{\" \"}\r\n                        different elements. The{\" \"}\r\n                        <span class=\"description-parameter\">first</span> element\r\n                        is a{\" \"}\r\n                        <span class=\"description-parameter\">&lt;line&gt;</span>.\r\n                        Its <span class=\"description-parameter\">y1</span>{\" \"}\r\n                        encodes the attribute{\" \"}\r\n                        <span class=\"description-parameter\">\r\n                            number_of_movies_by_year@2019\r\n                        </span>\r\n                        . Its <span class=\"description-parameter\">y2</span>{\" \"}\r\n                        encodes the attribute{\" \"}\r\n                        <span class=\"description-parameter\">\r\n                            number_of_movies_by_year@2020\r\n                        </span>\r\n                        .\r\n                    </GallaryItem>\r\n                    <GallaryItem\r\n                        image={\"./data/imdb-movies-link/imdb-movies-link.png\"}\r\n                        title={\"IMDb Dataset: Bars on Links\"}\r\n                        route={\"/imdb-movies-link\"}\r\n                    >\r\n                        Two nodes are connected if their attributes{\" \"}\r\n                        <span class=\"description-parameter\">year</span> are\r\n                        close, maybe with a difference less than:{\" \"}\r\n                        <span class=\"description-parameter\">5</span>. Each{\" \"}\r\n                        <span class=\"description-parameter\">node</span> consists\r\n                        of only <span class=\"description-parameter\">1</span>{\" \"}\r\n                        element. It is a{\" \"}\r\n                        <span class=\"description-parameter\">\r\n                            &lt;circle&gt;\r\n                        </span>\r\n                        . Its <span class=\"description-parameter\">r</span>{\" \"}\r\n                        encodes the attribute{\" \"}\r\n                        <span class=\"description-parameter\">avg_vote</span>.\r\n                    </GallaryItem>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport { HomePage }\r\n","import { Main } from \"./Main\";\r\nimport {\r\n  HashRouter as Router,\r\n  Switch,\r\n  Route,\r\n} from \"react-router-dom\";\r\nimport { HomePage } from \"./pages/HomePage\";\r\nimport './utils/color.js'\r\n\r\nconst titleMap = {\r\n  'imdb-movies-shapes': 'IMDb Dataset: Nodes with Different Shapes',\r\n  'imdb-movies': 'IMDb Dataset: Simple Nodes and Links',\r\n  'imdb-actors': 'IMDb Dataset: Line Charts Embeded on Nodes',\r\n  'imdb-movies-link': 'IMDb Dataset: Bars on Links'\r\n}\r\n\r\nfunction App() {\r\n  return (\r\n    <Router>\r\n      <Switch>\r\n        <Route exact path=\"/\">\r\n          <HomePage />\r\n        </Route>\r\n        <Route path=\"/:demo\" render={({ match }) => {\r\n          return <Main title={titleMap[match.params.demo]} />\r\n        }}>\r\n        </Route>\r\n      </Switch>\r\n    </Router>\r\n  )\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from \"react\"\r\nimport ReactDOM from \"react-dom\"\r\nimport \"./index.css\"\r\nimport App from \"./App\"\r\nimport reportWebVitals from \"./reportWebVitals\"\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <App />\r\n    </React.StrictMode>,\r\n    document.getElementById(\"root\")\r\n)\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals()\r\n"],"sourceRoot":""}